<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS安装搜狗输入法</title>
    <url>/2020/08/31/CentOS%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<p>系统版本：<code>CentOS Linux release 7.7.1908 (Core)</code></p>
<h2 id="安装fcitx输入法框架"><a href="#安装fcitx输入法框架" class="headerlink" title="安装fcitx输入法框架"></a>安装fcitx输入法框架</h2><p>安装fcitx输入法框架，注意不要删除ibus框架，gnome-shell依赖ibus框架，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install libQtWebKit* fcitx fcitx-libs fcitx-qt4 fcitx-qt5 fcitx-configtool fcitx-table fcitx-table-chinese qt5-qtbase</span><br></pre></td></tr></table></figure>
<p>新建<code>/etc/profile.d/fcitx.sh</code>，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export QT4_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS="@im=fcitx"</span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">设置`fctix`开机自启动，在`gnome-tweaks`中设置<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">设置当前用户默认不启动`ibus-daemon`：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="title">$ sudo setfacl -m u:yfshi:</span>rw /usr/bin/ibus-daemon</span><br></pre></td></tr></table></figure>
<p>为了在<code>gnome-terminal</code>中也能使用<code>fcitx</code>，设置如下，这是gnome3的新特性导致的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gsettings <span class="built_in">set</span> org.gnome.settings-daemon.plugins.xsettings overrides <span class="string">"&#123;'Gtk/IMModule':&lt;'fcitx'&gt;&#125;"</span></span></span><br></pre></td></tr></table></figure>
<p>设置a<code>lternatives</code>为<code>fcitx</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> alternatives --install /etc/X11/xinit/xinputrc xinputrc /etc/X11/xinit/xinput.d/fcitx.conf 100</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --config xinputrc</span></span><br></pre></td></tr></table></figure>
<h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><p>下载搜狗输入法for linux，只有deb包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo wget http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb?st=EPtVkvlW9rLVsn-jtfOGbA&amp;e=1568569239&amp;fn=sogoupinyin_2.2.0.0108_amd64.deb</span></span><br></pre></td></tr></table></figure>
<p>安装<code>alien</code>工具，把deb转成rpm包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install alien</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo alien -r --scripts sogoupinyin_2.2.0.0108_amd64.deb</span></span><br></pre></td></tr></table></figure>
<p>安装搜狗拼音输入法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cp /usr/lib/x86_64-linux-gnu/fcitx/* /usr/lib64/fcitx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod -R 755 /usr/lib64/fcitx/</span></span><br></pre></td></tr></table></figure>
<h2 id="配置搜狗输入法"><a href="#配置搜狗输入法" class="headerlink" title="配置搜狗输入法"></a>配置搜狗输入法</h2><p>重启<code>reboot</code>；</p>
<p><code>fcitx</code>添加搜狗输入法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> fcitx-configtool</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，在fcitx-configtool的高级设置中关闭搜狗输入法的云输入，否则cpu可能会100%.</p>
</blockquote>
<p>设置搜狗输入法。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>sogou</tag>
        <tag>搜狗</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS第三方库</title>
    <url>/2018/07/11/CentOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
    <content><![CDATA[<p><code>Software Collections</code></p>
<p><code>EPEL</code> <code>Remi</code> <code>CentOS</code></p>
<p>在Red Hat企业Linux（RHEL）上，一般都是提供的老掉牙的软件。CentOS作为RHEL的复制品有着同样的问题。</p>
<p>如果应用依赖新版软件，怎么办呢？使用第三方仓库，推荐Software Collections、epel、Remi Collet。</p>
<ul>
<li><p>Software Collections</p>
<p>单独安装在/opt中，新旧软件分离，需要启动。</p>
</li>
<li><p>epel</p>
<p>新旧软件不分离，容易造成混乱。无需启动，直接生效。</p>
</li>
<li><p>Remi Collet</p>
<p>同epel。</p>
</li>
</ul>
<h1 id="Software-Collections"><a href="#Software-Collections" class="headerlink" title="Software Collections"></a>Software Collections</h1><p><a href="https://www.softwarecollections.org/en/" target="_blank" rel="noopener">Software Collections</a>是 Red Hat 唯一支持的新软件包源，为 CentOS 设立了专门的仓库，安装和管理都和其它第三方仓库一样。</p>
<p>在 CentOS 6/7上安装Software Collections命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install centos-release-scl</span></span><br></pre></td></tr></table></figure>
<p><code>centos-release-scl-rh</code> 可能作为依赖包被同时安装。</p>
<p>然后就可以像平常一样搜索、安装软件包了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum search php7</span></span><br><span class="line"> [...]</span><br><span class="line"> rh-php70.x86_64 : Package that installs PHP 7.0</span><br><span class="line"> [...]</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install rh-php70</span></span><br></pre></td></tr></table></figure>
<p>启用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scl <span class="built_in">enable</span> rh-php70 bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> php -v</span></span><br><span class="line">PHP 7.0.10</span><br></pre></td></tr></table></figure>
<p>这些 SCL 软件包在重启后不会激活。SCL 的设计初衷就是在不影响原有配置的前提下，让新旧软件能一起运行。不过你可以通过 <code>~/.bashrc</code> 加载 SCL 提供的 <code>enable</code> 脚本来实现自动启用。 SCL 的所有软件包都安装在 <code>/opt</code> 下， 以我们的 PHP 7 为例，在 <code>~/.bashrc</code> 里加入一行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /opt/rh/rh-php70/enable</span><br></pre></td></tr></table></figure>
<h1 id="EPEL"><a href="#EPEL" class="headerlink" title="EPEL"></a>EPEL</h1><p>Fedora 社区为 Feora 及所有 RHEL 系的发行版维护着 <a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="noopener">EPEL：Extra Packages for Enterprise Linux</a> 。 里面包含一些最新软件包以及一些未被发行版收纳的软件包。</p>
<p>CentOS6/7安装命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum --disablerepo=epel -y update ca-certificates</span><br></pre></td></tr></table></figure>
<p>安装 EPEL 里的软件就不用麻烦 <code>enable</code> 脚本了，直接像平常一样用。你还可以用 <code>--disablerepo</code> 和 <code>--enablerepo</code> 选项指定从 EPEL 里安装软件包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum --disablerepo <span class="string">"*"</span> --enablerepo epel install [package]</span></span><br></pre></td></tr></table></figure>
<h1 id="Remi-Collet"><a href="#Remi-Collet" class="headerlink" title="Remi Collet"></a>Remi Collet</h1><p>Remi Collet 在 <a href="http://rpms.remirepo.net/" target="_blank" rel="noopener">Remi 的 RPM 仓库</a> 里维护着大量更新的和额外的软件包。需要先安装 EPEL ，因为 Remi 仓库依赖它。</p>
<p>CentOS wiki 上有较完整的仓库列表：<a href="https://wiki.centos.org/AdditionalResources/Repositories" target="_blank" rel="noopener">更多的第三方仓库</a> ，用哪些，不用哪些，里面都有建议。</p>
<h1 id="指定仓库"><a href="#指定仓库" class="headerlink" title="指定仓库"></a>指定仓库</h1><p>列出可用仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum repolist</span></span><br><span class="line">[...]</span><br><span class="line">repo id                  repo name</span><br><span class="line">base/7/x86_64            CentOS-7 - Base</span><br><span class="line">centos-sclo-rh/x86_64    CentOS-7 - SCLo rh</span><br><span class="line">centos-sclo-sclo/x86_64  CentOS-7 - SCLo sclo</span><br><span class="line">extras/7/x86_64          CentOS-7 - Extras</span><br><span class="line">updates/7/x86_64         CentOS-7 - Updates</span><br></pre></td></tr></table></figure>
<p>列出指定仓库中的 软件包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum --disablerepo <span class="string">"*"</span> --enablerepo centos-sclo-rh list available</span></span><br></pre></td></tr></table></figure>
<p><code>--disablerepo</code> 与 <code>--enablerepo</code> 简单说下。 实际上在这个命令里你并没有禁用或启用什么东西，而只是将你的搜索范围限制在某一个仓库内。</p>
<p>从指定仓库安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum --disablerepo <span class="string">"*"</span> --enablerepo epel install [package]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Greenplum安装</title>
    <url>/2018/07/10/Greenplum%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>节点分配：</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>主机名</th>
<th>segment</th>
<th>mirror</th>
</tr>
</thead>
<tbody>
<tr>
<td>10.0.0.100</td>
<td>gp</td>
<td>master</td>
<td></td>
</tr>
<tr>
<td>10.0.0.101</td>
<td>gp1</td>
<td>pseg0、pseg1</td>
<td>mseg4、mseg5</td>
</tr>
<tr>
<td>10.0.0.102</td>
<td>gp2</td>
<td>pseg2、gpseg3</td>
<td>mseg0、mseg1</td>
</tr>
<tr>
<td>10.0.0.103</td>
<td>gp3</td>
<td>pseg4、pseg5</td>
<td>mseg2、mseg3</td>
</tr>
<tr>
<td>10.0.0.104</td>
<td>gps</td>
<td>standby</td>
</tr>
</tbody>
</table>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>本章所有操作在所有节点使用root用户执行</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>当前系统如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/issue</span></span><br><span class="line">CentOS release 6.4 (Final)</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> uname -a</span></span><br><span class="line">Linux vm 2.6.32-358.el6.x86_64 #1 SMP Fri Feb 22 00:31:26 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>
<p>搭建基本环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> linux基本环境</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y bzip2 cmake gcc gcc-c++ gdb git libtool lrzsz make man net-tools sysstat unzip vim wget zip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库开发环境</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y apr-devel apr-util-devel bison bzip2-devel c-ares-devel flex java-1.8.0-openjdk java-1.8.0-openjdk-devel json-c-devel krb5-devel libcurl-devel libevent-devel libkadm5 libxml2-devel libxslt-devel libyaml-devel openldap-devel openssl-devel pam-devel perl perl-devel perl-ExtUtils-Embed readline-devel unixODBC-devel zlib-devel</span></span><br></pre></td></tr></table></figure>
<p>如果上述环境无法满足要求，参考<a href="../Greenplum编译/">Greenplun编译</a></p>
<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service iptables stop</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chkconfig iptables off</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用selinux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/selinux/config</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别配置ip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bash -c <span class="string">'cat &gt; /etc/sysctl.conf &lt;&lt;-EOF</span></span></span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=10.0.0.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">EOF'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别设置主机名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/network</span></span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=gp</span><br></pre></td></tr></table></figure>
<h2 id="系统参数配置"><a href="#系统参数配置" class="headerlink" title="系统参数配置"></a>系统参数配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/sysctl.conf &lt;&lt;-EOF</span></span><br><span class="line">kernel.shmmax = 500000000</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.shmall = 4000000000</span><br><span class="line">kernel.sem = 500 1024000 200 4096</span><br><span class="line">kernel.sysrq = 1</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.msgmni = 2048</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line">net.ipv4.conf.all.arp_filter = 1</span><br><span class="line">net.ipv4.ip_local_port_range = 1025 65535</span><br><span class="line">net.core.netdev_max_backlog = 10000</span><br><span class="line">net.core.rmem_max = 2097152</span><br><span class="line">net.core.wmem_max = 2097152</span><br><span class="line">vm.overcommit_memory = 2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/security/limits.conf &lt;&lt;-EOF</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 131072</span><br><span class="line">* hard nproc 131072</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/ld.so.conf &lt;&lt;-EOF</span></span><br><span class="line">/usr/local/lib</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="添加主机名本地映射"><a href="#添加主机名本地映射" class="headerlink" title="添加主机名本地映射"></a>添加主机名本地映射</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/hosts &lt;&lt;-EOF</span></span><br><span class="line">10.0.0.100  ka</span><br><span class="line">10.0.0.101  ka1</span><br><span class="line">10.0.0.102  ka2</span><br><span class="line">10.0.0.103  ka3</span><br><span class="line">10.0.0.104  kas</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="重启操作系统"><a href="#重启操作系统" class="headerlink" title="重启操作系统"></a>重启操作系统</h2><p>上述所有配置完成之后重启操作系统。</p>
<p>如果是在虚拟机操作，创建快照，方便以后恢复。另外，如果是虚拟机操作，只需配置一台机器，然后克隆其他的机器，修改ip和主机名即可。</p>
<h1 id="安装Greenplum"><a href="#安装Greenplum" class="headerlink" title="安装Greenplum"></a>安装Greenplum</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> useadd gpadmin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> passwd gpadmin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sudoers</span></span><br><span class="line">gpadmin ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>
<p>以下操作都在主节点的gpadmin用户下进行</p>
<h2 id="创建节点文件"><a href="#创建节点文件" class="headerlink" title="创建节点文件"></a>创建节点文件</h2><p>创建两个文件：all_hosts和all_segs，all_hosts是所有节点列表，all_segs是所有segment所在的节点列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat all_hosts</span></span><br><span class="line">gp</span><br><span class="line">gp1</span><br><span class="line">gp2</span><br><span class="line">gp3</span><br><span class="line">gps</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat all_segs</span></span><br><span class="line">gp1</span><br><span class="line">gp2</span><br><span class="line">gp3</span><br></pre></td></tr></table></figure>
<h2 id="配置主机互信"><a href="#配置主机互信" class="headerlink" title="配置主机互信"></a>配置主机互信</h2><p>交换密钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /home/gpadmin/gpdb/Greenplum_path.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gpssh-exkeys -f all_hosts</span></span><br></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>master节点安装Greenplum到/home/gpadmin/gpdb</p>
<p>略</p>
</li>
<li><p>把master的Greenplum同步安装到其他机器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /home/gpadmin/gpdb/Greenplum_path.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gpseginstall -f all_hosts</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="初始化Greenplum"><a href="#初始化Greenplum" class="headerlink" title="初始化Greenplum"></a>初始化Greenplum</h1><p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp /home/gpadmin/gpdb/docs/cli_help/gpconfigs/gpinitsystem_config .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改为如下配置，各个参数的意义参考注释</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat gpinitsystem_config | grep -E -v <span class="string">'^#'</span> | grep -v <span class="string">'^$'</span></span></span><br><span class="line">ARRAY_NAME="Greenplum Data Platform"</span><br><span class="line">SEG_PREFIX=gpseg</span><br><span class="line">PORT_BASE=40000</span><br><span class="line">declare -a DATA_DIRECTORY=(/data/primary)</span><br><span class="line">MASTER_HOSTNAME=ka</span><br><span class="line">MASTER_DIRECTORY=/data/master</span><br><span class="line">MASTER_PORT=5432</span><br><span class="line">TRUSTED_SHELL=ssh</span><br><span class="line">CHECK_POINT_SEGMENTS=8</span><br><span class="line">ENCODING=UNICODE</span><br><span class="line">MIRROR_PORT_BASE=50000</span><br><span class="line">REPLICATION_PORT_BASE=41000</span><br><span class="line">MIRROR_REPLICATION_PORT_BASE=51000</span><br><span class="line">declare -a MIRROR_DATA_DIRECTORY=(/data/mirror)</span><br></pre></td></tr></table></figure>
<p>创建数据目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpssh -f all_hosts</span></span><br><span class="line">=&gt; sudo mkdir /data</span><br><span class="line">=&gt; sudo chown gpadmin.gpadmin /data</span><br><span class="line">=&gt; mkdir /data/master</span><br><span class="line">=&gt; mkdir /data/primary</span><br><span class="line">=&gt; mkdir /data/mirror</span><br></pre></td></tr></table></figure>
<p>初始化集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpinitsystem -c gpinitsystem_config -h all_segs -s kas -S</span></span><br></pre></td></tr></table></figure>
<p>配置主机和备机的环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi .bashrc</span></span><br><span class="line">if [ -f /home/gpadmin/gpdb/Greenplum_path.sh ]; then</span><br><span class="line">	source /home/gpadmin/gpdb/Greenplum_path.sh</span><br><span class="line">	export MASTER_DATA_DIRECTORY=/data/master/gpseg-1</span><br><span class="line">fi</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> .bashrc</span></span><br></pre></td></tr></table></figure>
<h1 id="使用Greenplum"><a href="#使用Greenplum" class="headerlink" title="使用Greenplum"></a>使用Greenplum</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> psql -hgp -dpostgres</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Greenplum</tag>
      </tags>
  </entry>
  <entry>
    <title>Greenplum编译</title>
    <url>/2018/07/10/Greenplum%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<blockquote>
<p>操作系统：centos6.4 x64最小安装</p>
</blockquote>
<h1 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> useradd gpadmin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> passwd gpadmin</span></span><br></pre></td></tr></table></figure>
<p>把gpadmin加入sudoer，之后的操作都在gpadmin用户下完成。</p>
<h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> linux基本环境</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y bzip2 cmake gcc gcc-c++ gdb git libtool lrzsz make man net-tools sysstat unzip vim wget zip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库开发环境</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y apr-devel apr-util-devel bison bzip2-devel c-ares-devel flex java-1.8.0-openjdk java-1.8.0-openjdk-devel json-c-devel krb5-devel libcurl-devel libevent-devel libkadm5 libxml2-devel libxslt-devel libyaml-devel openldap-devel openssl-devel pam-devel perl perl-devel perl-ExtUtils-Embed readline-devel unixODBC-devel zlib-devel</span></span><br></pre></td></tr></table></figure>
<p>一般来说，上面安装的开发包足够一般的数据库编译或安装使用了。</p>
<blockquote>
<p>如果Greenplum版本较新(&gt;=5X_STABLE)，CentOS 6.4官方的开发包版本可能无法满足Greenplum（比如glibc不支持C11标准，python版本较低、cmake版本较低等）,也可能会缺少一些其他的包。</p>
<p>可以通过源码编译或者非官方yum源安装合适的版本。</p>
</blockquote>
<h1 id="编译开发包"><a href="#编译开发包" class="headerlink" title="编译开发包"></a>编译开发包</h1><h2 id="gcc-4-8-5"><a href="#gcc-4-8-5" class="headerlink" title="gcc-4.8.5"></a>gcc-4.8.5</h2><p>Greenplum较新的代码要用到C11/C++11标准，要求gcc版本4.7以上。由于系统自带或yum安装的gcc版本是4.4.7，需要编译更高版本的gcc。</p>
<p>编译gcc需要先编译gmp、mpfr、mpc，按照顺序编译安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译gmp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://gmplib.org/download/gmp/gmp-6.1.0.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -jxf gmp-6.1.0.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gmp-6.1.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译mpfr</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.mpfr.org/mpfr-3.1.4/mpfr-3.1.4.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -jxf mpfr-3.1.4.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mpfr-3.1.4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/gcc --with-gmp=/home/gpadmin/BuildEnv/gcc</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译mpc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf mpc-1.0.3.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mpc-1.0.3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/gcc --with-gmp=/home/gpadmin/BuildEnv/gcc --with-mpfr=/home/gpadmin/BuildEnv/gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget ftp://gcc.gnu.org/pub/gcc/releases/gcc-4.8.5/gcc-4.8.5.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -jxf gcc-4.8.5.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gcc-4.8.5</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> LD_LIBRARY_PATH=/home/gpadmin/BuildEnv/gcc/lib:<span class="variable">$LD_LIBRARY_PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/gcc --with-gmp=/home/gpadmin/BuildEnv/gcc --with-mpfr=/home/gpadmin/BuildEnv/gcc --with-mpc=/home/gpadmin/BuildEnv/gcc --<span class="built_in">disable</span>-multilib</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export LD_LIBRARY_PATH=/home/gpadmin/BuildEnv/gcc/lib:/home/gpadmin/BuildEnv/gcc/lib64:$LD_LIBRARY_PATH</span><br><span class="line">export PATH=/home/gpadmin/BuildEnv/gcc/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h2 id="cmake3"><a href="#cmake3" class="headerlink" title="cmake3"></a>cmake3</h2><p>gporca要求cmake版本3.1以上，系统自带或者yum安装的cmake是cmake-2.8，需要编译更高版本cmake。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://cmake.org/files/v3.10/cmake-3.10.3.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf cmake-3.10.3.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> cmake-3.10.3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/cmake</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export LD_LIBRARY_PATH=/home/gpadmin/BuileEnv/cmake/lib:$LD_LIBRARY_PATH</span><br><span class="line">export PATH=/home/gpadmin/BuildEnv/cmake/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h2 id="python-2-7"><a href="#python-2-7" class="headerlink" title="python-2.7"></a>python-2.7</h2><p>greeplum要求python 2.7以上，系统自带或yum安装的python是2.6，需要编译新版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译python</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xf Python-2.7.14.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> Python-2.7.14</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/python --<span class="built_in">enable</span>-optimizations -<span class="built_in">enable</span>-shared CFLAGS=-fPIC</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export LD_LIBRARY_PATH=/home/gpadmin/BuildEnv/python/lib:$LD_LIBRARY_PATH</span><br><span class="line">export PATH=/home/gpadmin/BuildEnv/python/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python -m ensurepip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade pip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装python模块</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install psutil lockfile paramiko setuptools</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>python2.6+yum的使用：</p>
<p>安装python和工具：sudo yum install -y python python-setuptools python-devel python-crypto python-paramiko</p>
<p>安装python模块：<br>sudo easy_install lockfile<br>sudo easy_install psi</p>
</blockquote>
<h2 id="ninja"><a href="#ninja" class="headerlink" title="ninja"></a>ninja</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /home/gpadmin/BuildEnv/ninja/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip -d /home/gpadmin/BuildEnv/ninja/bin ninja-linux.zip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=/home/gpadmin/BuildEnv/ninja/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h2 id="geos-proj-gdal"><a href="#geos-proj-gdal" class="headerlink" title="geos+proj+gdal"></a>geos+proj+gdal</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> geos</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.osgeo.org/geos/geos-3.4.2.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xjf geos-3.4.2.tar.bz2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> geos-3.4.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/geos</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> proj</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.osgeo.org/proj/proj-4.9.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf proj-4.9.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> proj-4.9.1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/proj</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gdal</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.osgeo.org/gdal/1.11.2/gdal-1.11.2.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf gdal-1.11.2.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gdal-1.11.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/gdal</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export LD_LIBRARY_PATH=/home/gpadmin/BuildEnv/geos/lib:/home/gpadmin/BuildEnv/proj/lib:/home/gpadmin/BuildEnv/gdal/lib:$LD_LIBRARY_PATH</span><br><span class="line">export PATH=/home/gpadmin/BuildEnv/geos/bin:/home/gpadmin/BuildEnv/proj/bin:/home/gpadmin/BuildEnv/gdal/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h2 id="libevent"><a href="#libevent" class="headerlink" title="libevent"></a>libevent</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/downloads/libevent/libevent/libevent-2.0.20-stable.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xf libevent-2.0.20-stable.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> libevent-2.0.20-stable</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/BuildEnv/libevent</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export LD_LIBRARY_PATH=/home/gpadmin/BuildEnv/libevent/lib:$LD_LIBRARY_PATH</span><br><span class="line">export PATH=/home/gpadmin/BuildEnv/libevent/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h2 id="Apache-Maven"><a href="#Apache-Maven" class="headerlink" title="Apache Maven"></a>Apache Maven</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf apache-maven-3.5.4-bin.tar.gz -C /home/gpadmin/BuildEnv/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv /home/gpadmin/BuildEnv/apache-maven-3.5.4 /home/gpadmin/BuildEnv/apache-maven</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export PATH=/home/gpadmin/BuildEnv/apache-maven/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> souce ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h1 id="编译gporca"><a href="#编译gporca" class="headerlink" title="编译gporca"></a>编译gporca</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gp-xerces</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/Greenplum-db/gp-xerces.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gp-xerces/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ../configure --prefix=/home/gpadmin/gporca</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gporca</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/Greenplum-db/gporca.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gporca</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake -GNinja -D CMAKE_INSTALL_PREFIX=/home/gpadmin/gporca -D XERCES_LIBRARY=/home/gpadmin/gporca/lib/libxerces-c.so -D XERCES_INCLUDE_DIR=/home/gpadmin/gporca/include -H. -Bbuild</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ninja install -C build</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export LD_LIBRARY_PATH=/home/gpadmin/gporca/lib:$LD_LIBRARY_PATH</span><br><span class="line">export PATH=/home/gpadmin/gporca/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h1 id="编译gpdb"><a href="#编译gpdb" class="headerlink" title="编译gpdb"></a>编译gpdb</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/Greenplum-db/gpdb.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gpdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> LIBRARY_PATH=/home/gpadmin/gporca/lib:<span class="variable">$LIBRARY_PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> C_INCLUDE_PATH=/home/gpadmin/gporca/include:<span class="variable">$C_INCLUDE_PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> CPLUS_INCLUDE_PATH=/home/gpadmin/gporca/include:<span class="variable">$CPLUS_INCLUDE_PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --with-perl --with-python --with-libxml --with-gssapi --prefix=/home/gpadmin/gpdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>
<h1 id="编译postgis"><a href="#编译postgis" class="headerlink" title="编译postgis"></a>编译postgis</h1><blockquote>
<p>PostGIS 2.1.5 for GreenPlum 5.x+ </p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/Greenplum-db/geospatial.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /home/gpadmin/gpdb/greenplum_path.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> geospatial/postgis/build/postgis-2.1.5/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=<span class="variable">$GPHOME</span> --with-pgconfig=<span class="variable">$GPHOME</span>/bin/pg_config --with-raster --without-topology --with-projdir=/home/gpadmin/BuildEnv/proj</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make USE_PGXS=1 clean all install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装postgis</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql -d postgres -f <span class="variable">$&#123;GPHOME&#125;</span>/share/postgresql/contrib/postgis-2.1/postgis.sql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql -d postgres -f <span class="variable">$&#123;GPHOME&#125;</span>/share/postgresql/contrib/postgis-2.1/postgis_comments.sql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql -d postgres -f <span class="variable">$&#123;GPHOME&#125;</span>/share/postgresql/contrib/postgis-2.1/rtpostgis.sql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql -d postgres -f <span class="variable">$&#123;GPHOME&#125;</span>/share/postgresql/contrib/postgis-2.1/raster_comments.sql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql -d postgres -f <span class="variable">$&#123;GPHOME&#125;</span>/share/postgresql/contrib/postgis-2.1/spatial_ref_sys.sql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi <span class="variable">$GPHOME</span>/greenplum_path.sh</span></span><br><span class="line">export GDAL_DATA=$GPHOME/share/gdal</span><br><span class="line">export POSTGIS_ENABLE_OUTDB_RASTERS=0</span><br><span class="line">export POSTGIS_GDAL_ENABLED_DRIVERS=DISABLE_ALL</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> gpstop –r	//重启数据库</span></span><br></pre></td></tr></table></figure>
<h1 id="编译pgbouncer"><a href="#编译pgbouncer" class="headerlink" title="编译pgbouncer"></a>编译pgbouncer</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> -b pgbouncer_1_8_1 git://github.com/Greenplum-db/pgbouncer.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> pgbouncer</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./autogen.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/pgbouncer</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bashrc</span></span><br><span class="line">export PATH=/home/gpadmin/pgbouncer/bin:$PATH</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h1 id="编译jdbc"><a href="#编译jdbc" class="headerlink" title="编译jdbc"></a>编译jdbc</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://jdbc.postgresql.org/download/postgresql-jdbc-42.2.2.src.tar.gz --no-check-certificate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf postgresql-jdbc-42.2.2.src.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> postgresql-jdbc-42.2-2.src/pgjdbc/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn package –DskipTests</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp target/postgresql-42.2.2.jar /home/gpadmin/gpdb/lib</span></span><br></pre></td></tr></table></figure>
<h1 id="编译odbc"><a href="#编译odbc" class="headerlink" title="编译odbc"></a>编译odbc</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://ftp.postgresql.org/pub/odbc/versions/src/psqlodbc-09.03.0400.tar.gz --no-check-certificate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xf psqlodbc-09.03.0400.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> psqlodbc-09.03.0400</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/psqlodbc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/odbcinst.ini</span></span><br><span class="line">[PostgreSQL]</span><br><span class="line">Description   = ODBC for PostgreSQL</span><br><span class="line">Driver       = /home/gpadmin/psqlodbc/lib/psqlodbcw.so </span><br><span class="line">Setup       = /usr/lib/libodbcpsqlS.so</span><br><span class="line">Driver64     = /home/gpadmin/psqlodbc/lib/psqlodbcw.so </span><br><span class="line">Setup64     = /usr/lib64/libodbcpsqlS.so</span><br><span class="line">FileUsage	    = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.odbc.ini</span></span><br><span class="line">[gp]</span><br><span class="line">Description = Test to gp</span><br><span class="line">Driver = PostgreSQL</span><br><span class="line">Database = postgres</span><br><span class="line">Servername = 127.0.0.1</span><br><span class="line">UserName = gpadmin</span><br><span class="line">Password = 111111</span><br><span class="line">Port = 5432</span><br><span class="line">ReadOnly = 0</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /home/gpadmin/gpdb/greenplum_path.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> isql gp</span></span><br></pre></td></tr></table></figure>
<h1 id="附：CentOS-7-0编译gpdb"><a href="#附：CentOS-7-0编译gpdb" class="headerlink" title="附：CentOS 7.0编译gpdb"></a>附：CentOS 7.0编译gpdb</h1><blockquote>
<p>CentOS 7.0最小化安装</p>
</blockquote>
<p>系统设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置ip，网络等</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装基本环境</span></span><br><span class="line">yum install -y bzip2 git lrzsz sysstat unzip vim wget zip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> useadd gpadmin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> passwd gpadmin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> su - gpadmin</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /home/gpadmin/code</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/gpadmin/code</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/greenplum-db/gpdb.git</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装开发环境</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -sf /bin/cmake3 /usr/<span class="built_in">local</span>/bin/cmake</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/gpadmin/code/gpdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./README.CentOS.bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo bash -c <span class="string">'cat &gt;&gt; /etc/sysctl.conf &lt;&lt;-EOF</span></span></span><br><span class="line">kernel.shmmax = 500000000</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.shmall = 4000000000</span><br><span class="line">kernel.sem = 500 1024000 200 4096</span><br><span class="line">kernel.sysrq = 1</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.msgmni = 2048</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line">net.ipv4.conf.all.arp_filter = 1</span><br><span class="line">net.ipv4.ip_local_port_range = 1025 65535</span><br><span class="line">net.core.netdev_max_backlog = 10000</span><br><span class="line">net.core.rmem_max = 2097152</span><br><span class="line">net.core.wmem_max = 2097152</span><br><span class="line">vm.overcommit_memory = 2</span><br><span class="line"></span><br><span class="line">EOF'</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo bash -c <span class="string">'cat &gt;&gt; /etc/security/limits.conf &lt;&lt;-EOF</span></span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 131072</span><br><span class="line">* hard nproc 131072</span><br><span class="line"></span><br><span class="line">EOF'</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo bash -c <span class="string">'cat &gt;&gt; /etc/ld.so.conf &lt;&lt;-EOF</span></span></span><br><span class="line">/usr/local/lib</span><br><span class="line"></span><br><span class="line">EOF'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译gporca</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/gpadmin/code/gpdb/depends</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/home/gpadmin/gpdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译gpdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> LD_LIBRARY_PATH=/home/gpadmin/gpdb/lib ./configure \</span></span><br><span class="line">--with-libraries=/home/gpadmin/gpdb/lib \</span><br><span class="line">--with-includes=/home/gpadmin/gpdb/include \</span><br><span class="line">--with-perl --with-python --with-libxml --with-gssapi --prefix=/home/gpadmin/gpdb</span><br><span class="line"><span class="meta">$</span><span class="bash"> LD_LIBRARY_PATH=/home/gpadmin/gpdb/lib make install</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Greenplum</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile</title>
    <url>/2018/10/30/Makefile/</url>
    <content><![CDATA[<p>下面是一个基础的Makefile文件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一些基本命令和参数</span></span><br><span class="line">CC = gcc</span><br><span class="line">AR = ar</span><br><span class="line">AROPT = crs</span><br><span class="line">CFLAGS += -g3 -O0</span><br><span class="line">CFLAGS += -std=gnu99 -Wall</span><br><span class="line">CFLAGS += -I./<span class="keyword">include</span> -fPIC</span><br><span class="line">CFLAGS += -fpic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译命令，编译.o、.a、.so的命令分别如下：</span></span><br><span class="line">COMPILER = <span class="variable">$(CC)</span> <span class="variable">$(CFLGAS)</span></span><br><span class="line">LINK.static = <span class="variable">$(AR)</span> <span class="variable">$(AROPT)</span></span><br><span class="line">LINK.shared = <span class="variable">$(COMPILER)</span> -shared <span class="comment">#-Wl,-soname,xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译过程需要链接的库，-Wl,--as-needed告诉连接器按需链接，比如crypto有的目标没有引用，则不连接</span></span><br><span class="line">LDFLAGS += -L./lib -Wl,--as-needed</span><br><span class="line">LIBS += -ltest -lcrypto -ld -lz -lc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公用接口文件</span></span><br><span class="line">OBJS :=  common.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要生成的目标文件</span></span><br><span class="line">PROGS := dgcheck dgservice libdongle.so libdongle.a test</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(PROGS)</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">dgcheck: dgcheck.o libdongle.o <span class="variable">$(OBJS)</span></span></span><br><span class="line">	<span class="variable">$(COMPILER)</span> <span class="variable">$^</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LIBS)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">dgservice: dgservice.o dongle.o <span class="variable">$(OBJS)</span></span></span><br><span class="line">	<span class="variable">$(COMPILER)</span> <span class="variable">$^</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LIBS)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">libdongle.so: libdongle.o <span class="variable">$(OBJS)</span></span></span><br><span class="line">	$(LINK.shared) <span class="variable">$^</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LIBS)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">libdongle.a: libdongle.o <span class="variable">$(OBJS)</span></span></span><br><span class="line">	$(LINK.static) <span class="variable">$@</span> <span class="variable">$^</span> </span><br><span class="line"></span><br><span class="line"><span class="section">test: test.o libdongle.o <span class="variable">$(OBJS)</span></span></span><br><span class="line">	<span class="variable">$(COMPILER)</span> <span class="variable">$^</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(LIBS)</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o <span class="variable">$(PROGS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">install: <span class="variable">$(PROGS)</span></span></span><br><span class="line">	mkdir -p deploy</span><br><span class="line">	cp -f <span class="variable">$^</span> deploy</span><br><span class="line"></span><br><span class="line"><span class="section">uninstall:</span></span><br><span class="line">	rm -rf deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Makefile</category>
      </categories>
      <tags>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL共享缓存区管理</title>
    <url>/2018/01/11/PostgreSQL%E5%85%B1%E4%BA%AB%E7%BC%93%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="共享缓冲区"><a href="#共享缓冲区" class="headerlink" title="共享缓冲区"></a>共享缓冲区</h1><p>PostgreSQL中的buffer主要是用来将外存中的数据内容读入到内存中，加速运算过程中对数据的访问速度，同时将数据的修改进行缓存，在必要时再将其写出到外存，避免频繁的I/O，以提高效率。<br>Buffer的种类有很多如Audit buffers、Clog buffers、Data buffers和Xlog buffers，此处所介绍的buffer管理是针对Data buffers而言的。</p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ul>
<li>BufferTag</li>
<li>BufferDesc</li>
<li>BufferStrategyControl</li>
</ul>
<h2 id="BufferTag"><a href="#BufferTag" class="headerlink" title="BufferTag"></a>BufferTag</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">buftag</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Oid dbid;            <span class="comment">/* database identifier */</span></span><br><span class="line">    FileBlock blockNum;  <span class="comment">/* file and blocknumber */</span></span><br><span class="line">&#125; BufferTag;</span><br></pre></td></tr></table></figure>
<h2 id="BufferDesc"><a href="#BufferDesc" class="headerlink" title="BufferDesc"></a>BufferDesc</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbufdesc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BufferTag   tag;              <span class="comment">/* ID of page contained in buffer */</span></span><br><span class="line">    RelFileNode rnode;            <span class="comment">/* relation this block belongs to */</span></span><br><span class="line">    BufFlags    flags;            <span class="comment">/* see bit definitions above */</span></span><br><span class="line">    uint16      usage_count;      <span class="comment">/* usage counter for clock sweep code */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    refcount;         <span class="comment">/* # of backends holding pins on buffer */</span></span><br><span class="line">    <span class="keyword">int</span>         wait_backend_pid; <span class="comment">/* backend PID of pin-count waiter */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">slock_t</span>     buf_hdr_lock;     <span class="comment">/* protects the above fields */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>         buf_id;           <span class="comment">/* buffer's index number (from 0) */</span></span><br><span class="line">    <span class="keyword">int</span>         freeNext;         <span class="comment">/* link in freelist chain */</span></span><br><span class="line"></span><br><span class="line">    LWLockId    io_in_progress_lock; <span class="comment">/* to wait for I/O to complete */</span></span><br><span class="line">    LWLockId    content_lock;     <span class="comment">/* to lock access to buffer contents */</span></span><br><span class="line">&#125; BufferDesc;</span><br></pre></td></tr></table></figure>
<h2 id="引用计数（BufferDesc-refcount）"><a href="#引用计数（BufferDesc-refcount）" class="headerlink" title="引用计数（BufferDesc.refcount）"></a>引用计数（BufferDesc.refcount）</h2><p>引用计数（refcount）用于跟踪访问buffer的后台数量，防止错误的将正在被使用的Buffer淘汰。当使用Buffer时，需要将其引用计数（refcount）加1（PinBuffer）。当Buffer不再使用，需要将其引用计数（refcount）减1（UnpinBuffer）。这里需要注意，由于一个后台可以多次访问同一个Buffer，因此后台通过PrivateRefCount来记录自己的引用次数，只有当自己对一个Buffer的引用减少到0，才会真正去修改refcount。PrivateRefCount在后台PinBuffer时将其值加1，UnpinBuffer时将其值减1。</p>
<h2 id="使用计数（BufferDesc-usage-count）"><a href="#使用计数（BufferDesc-usage-count）" class="headerlink" title="使用计数（BufferDesc.usage_count）"></a>使用计数（BufferDesc.usage_count）</h2><p>usage_count用来标记Buffer被使用的次数，usage_count值越大，说明该Buffer经常被使用，那么在未来的一段时间里被使用的可能就比较大，所以这样的Buffer不能作为被替换的对象；相反，usage_count值越小，说明经常不被使用，可以作为替换的对象。在PostgreSQL中，只有当usage_count为0时，才可能作为替换的对象。<br>usage_count是在一个后台不再使用该Buffer即UnpinBuffer将后台的PrivateRefCount减少为0的时候将其值加1，以表示该Buffer最近被一个后台使用了。对VACUUN操作来说，不会修改usage_count的值，且如果refcount和usage_count的值都为0，则将buffer放入到FreeList的尾部。</p>
<h2 id="BufferStrategyControl"><a href="#BufferStrategyControl" class="headerlink" title="BufferStrategyControl"></a>BufferStrategyControl</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>    nextVictimBuffer; <span class="comment">// 指向下一Buffer</span></span><br><span class="line">    <span class="keyword">int</span>    firstFreeBuffer;  <span class="comment">// 第一个空闲缓冲块id</span></span><br><span class="line">    <span class="keyword">int</span>    lastFreeBuffer;   <span class="comment">// 最后一个空闲缓冲块id</span></span><br><span class="line">&#125; BufferStrategyControl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pointers to shared state */</span></span><br><span class="line"><span class="keyword">static</span> MT_LOCAL BufferStrategyControl</span><br><span class="line">	*StrategyControl = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Buffer-Descriptors"><a href="#Buffer-Descriptors" class="headerlink" title="Buffer Descriptors"></a>Buffer Descriptors</h2><p><img src="/img/BufferDescriptor.png" alt></p>
<h1 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h1><ul>
<li>InitBufferPool</li>
<li>BufferAlloc</li>
<li>StrategyGetBuffer</li>
<li>FlushBuffer</li>
<li>PinBuffer</li>
<li>UnpinBuffer</li>
</ul>
<h2 id="InitBufferPool流程"><a href="#InitBufferPool流程" class="headerlink" title="InitBufferPool流程"></a>InitBufferPool流程</h2><p><img src="/img/InitBufferPool.svg" alt></p>
<h2 id="BufferAlloc流程"><a href="#BufferAlloc流程" class="headerlink" title="BufferAlloc流程"></a>BufferAlloc流程</h2><p><img src="/img/BufferAlloc.svg" alt></p>
<h1 id="缓冲区替换策略"><a href="#缓冲区替换策略" class="headerlink" title="缓冲区替换策略"></a>缓冲区替换策略</h1><ul>
<li>FreeList</li>
<li>Clock-sweep</li>
<li>buffer-ring</li>
</ul>
<h2 id="FreeList"><a href="#FreeList" class="headerlink" title="FreeList"></a>FreeList</h2><p>当执行DROP TABLE时，可以确定该表的所有buffer都会失效，因此将此表的所有buffer都放入到Freelist的头部，这样可以在下一次分配buffer时，直接从Freelist中得到buffer，而不需要执行Clock Sweep算法。</p>
<h2 id="Clock-sweep"><a href="#Clock-sweep" class="headerlink" title="Clock-sweep"></a>Clock-sweep</h2><p>当Buffer的refcount计数变成0的时候，代表当前系统没有后台引用此数据块。在PostgreSQL中，为了能够减低锁的粒度、提高并发性，引用计数等于0的的Buffer并没有被放入Freelist中。在随机访问大量磁盘块、并且没有VACUUM的干扰下，Freelist几乎是空的（除了刚刚启动时）。这里的策略主要是为了避免不必要的持有操作Freelist的互斥锁。<br>由于大部分时候Buffer不会立即被放入到Freelist中，因此使用了一种被称为Clock Sweep的算法来分配Buffer。此算法类似教科书中时钟算法，每当需要使用Clock Sweep算法选择一个Buffer时，就从上次分配的Buffer的下一个位置开始，搜索引用计数为0（既没有被pin的Buffer）且usage_count为0的Buffer。如果该Buffer不满足上述条件，就将usage_count减1。</p>
<h2 id="Clock-sweep-1"><a href="#Clock-sweep-1" class="headerlink" title="Clock-sweep"></a>Clock-sweep</h2><p><img src="/img/Clock-sweep.png" alt></p>
<blockquote>
<p>在上图中Clock Sweep算法从4号buffer开始查找（记录在StrategyControl结构体中）可用的buffer。4号buffer因为引用计数大于0，因此不能被替换。5号buffer虽然没有人引用，但是其usage_count大于0，因此表示此buffer使用频率较高，因此将usage_count减1，并查看6号buffer。6号buffer的引用计数和usage_count都为0，因此选择将6号buffer淘汰。记录下一次搜索的位置是7号，并退出选择算法。</p>
</blockquote>
<h2 id="buffer-ring"><a href="#buffer-ring" class="headerlink" title="buffer-ring"></a>buffer-ring</h2><p>批量读或者vacuum等操作可能会需要占据大量的buffer，影响其他正常业务。buffer-ring机制在批量读等占用的buffer数量达到某个程度（比如总buffer的1/4）时，分配给该操作固定的buffer数量，之后只能使用为其分配的buffer，而不能替换其他buffer。</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL内存上下文</title>
    <url>/2018/01/11/PostgreSQL%E5%86%85%E5%AD%98%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<h1 id="内存管理体系结构"><a href="#内存管理体系结构" class="headerlink" title="内存管理体系结构"></a>内存管理体系结构</h1><p><img src="/img/内存管理体系结构.png" alt></p>
<hr>
<h1 id="内存上下文"><a href="#内存上下文" class="headerlink" title="内存上下文"></a>内存上下文</h1><p>内存上下文（MemoryContext）借鉴了操作系统的一些概念。</p>
<p>操作系统为每个进程分配了进程执行环境，进程之间互不影响，由操作系统来对环境进行切换，进程可以在其进程环境中调用内存操作函数：malloc、free、realloc等。</p>
<p>类似的，一个内存上下文实际上相当于一个进程环境，PostgreSQL以类似的方式提供了在内存上下文进行内存操作的函数：palloc、pfree、repalloc等。</p>
<p>每个进程/线程有多个私有的内存上下文，组成上下文树。</p>
<hr>
<h1 id="内存上下文树"><a href="#内存上下文树" class="headerlink" title="内存上下文树"></a>内存上下文树</h1><p><img src="/img/内存上下文.jpg" alt="内存上下文"></p>
<ul>
<li>每个线程都有多个内存上上下文，组成树形结构。线程所有的内存操作都在各种语义的上下文中进行。</li>
<li>释放上下文节点会释放其所有的子节点。</li>
<li>线程退出时释放TopMemoryContext。</li>
</ul>
<hr>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ul>
<li>MemoryContext</li>
<li>AllocSetContext</li>
<li>Block</li>
<li>Chunk</li>
<li>超大块</li>
<li>Chunk Free List</li>
</ul>
<hr>
<h1 id="内存上下文结构"><a href="#内存上下文结构" class="headerlink" title="内存上下文结构"></a>内存上下文结构</h1><p><img src="/img/内存上下文存储结构.jpg" alt></p>
<hr>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ul>
<li>MemoryContext</li>
<li>MemoryContextMethods</li>
<li>AllocSet</li>
<li>AllocBlockData</li>
<li>AllocChunkData</li>
</ul>
<hr>
<h2 id="MemoryContext"><a href="#MemoryContext" class="headerlink" title="MemoryContext"></a>MemoryContext</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MemoryContextData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    NodeTag       type;         <span class="comment">/* identifies exacts kind of context */</span></span><br><span class="line">    MemoryContextMethods *methods;  <span class="comment">/* virtual function table */</span></span><br><span class="line">    MemoryContext parent;        <span class="comment">/* NULL if no parent (toplevel context) */</span></span><br><span class="line">    MemoryContext firstchild;    <span class="comment">/* head of linked list of children */</span></span><br><span class="line">    MemoryContext nextchild;     <span class="comment">/* next child of same parent */</span></span><br><span class="line">    <span class="keyword">char</span>         *name;          <span class="comment">/* context name (just for debugging) */</span></span><br><span class="line">&#125; MemoryContextData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MemoryContextData</span> *<span class="title">MemoryContext</span>;</span></span><br></pre></td></tr></table></figure>
<p>MemoryContext中的methods字段是一个MemoryContextMethods类型，它是由一系列的函数指针组成的集合，其中包含了对内存上下文操作的函数。对不同的MemoryContext实现，可以设置不同的方法集合。目前MemoryContext中只有AllocSetContext一种实现，因此PostgreSQL中只有针对AllocSetContext的一种操作函数集合，由全局变量AllocSetMethods表示。</p>
<hr>
<h2 id="MemoryContextMethods"><a href="#MemoryContextMethods" class="headerlink" title="MemoryContextMethods"></a>MemoryContextMethods</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MemoryContextMethods</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span>       *(*alloc) (MemoryContext context, Size <span class="built_in">size</span>);</span><br><span class="line">    <span class="comment">/* call this free_p in case someone #define's free() */</span></span><br><span class="line">    <span class="keyword">void</span>        (*free_p) (MemoryContext context, <span class="keyword">void</span> *pointer);</span><br><span class="line">    <span class="keyword">void</span>       *(*<span class="built_in">realloc</span>) (MemoryContext context, <span class="keyword">void</span> *pointer, Size <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span>        (*init) (MemoryContext context);</span><br><span class="line">    <span class="keyword">void</span>        (*reset) (MemoryContext context);</span><br><span class="line">    <span class="keyword">void</span>        (*<span class="keyword">delete</span>) (MemoryContext context);</span><br><span class="line">    <span class="keyword">void</span>        (*reuse) (MemoryContext context);</span><br><span class="line">    Size        (*get_chunk_space) (MemoryContext context, <span class="keyword">void</span> *pointer);</span><br><span class="line">    <span class="keyword">bool</span>        (*is_empty) (MemoryContext context);</span><br><span class="line">    <span class="keyword">void</span>        (*stats) (MemoryContext context);</span><br><span class="line">    <span class="keyword">bool</span>        (*is_realempty)(MemoryContext context);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MEMORY_CONTEXT_CHECKING</span></span><br><span class="line">    <span class="keyword">void</span>        (*check) (MemoryContext context);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; MemoryContextMethods;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="方法集"><a href="#方法集" class="headerlink" title="方法集"></a>方法集</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> MemoryContextMethods AllocSetMethods = &#123;</span><br><span class="line">    AllocSetAlloc,</span><br><span class="line">    AllocSetFree,</span><br><span class="line">    AllocSetRealloc,</span><br><span class="line">    AllocSetInit,</span><br><span class="line">    AllocSetReset,</span><br><span class="line">    AllocSetDelete,</span><br><span class="line">    AllocSetReuse,</span><br><span class="line">    AllocSetGetChunkSpace,</span><br><span class="line">    AllocSetIsEmpty,</span><br><span class="line">    AllocSetStats,</span><br><span class="line">    AllocSetIsRealEmpty</span><br><span class="line">#ifdef MEMORY_CONTEXT_CHECKING</span><br><span class="line">    ,AllocSetCheck</span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>MemoryContext是一个抽象类，可以有多个实现，目前只有AllocSetContext一个实现。MemoryContext并不管理实际上的内存分配，仅仅用作对MemoryContext树的控制。管理一个内存上下文中的内存块时通过AllocSet结构来完成的，MemoryContext作为AllocSet的头部信息存在。</p>
<hr>
<h2 id="AllocSet"><a href="#AllocSet" class="headerlink" title="AllocSet"></a>AllocSet</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AllocSetContext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MemoryContextData header;  <span class="comment">/* Standard memory-context fields */</span></span><br><span class="line">    <span class="comment">/* Info about storage allocated in this context: */</span></span><br><span class="line">    AllocBlock  blocks;        <span class="comment">/* head of list of blocks in this set */</span></span><br><span class="line">    AllocChunk  freelist[ALLOCSET_NUM_FREELISTS]; <span class="comment">/* free chunk lists */</span></span><br><span class="line">    <span class="keyword">bool</span>        isReset;       <span class="comment">/* T = no space alloced since last reset */</span></span><br><span class="line">    <span class="comment">/* Allocation parameters for this context: */</span></span><br><span class="line">    Size        initBlockSize; <span class="comment">/* initial block size */</span></span><br><span class="line">    Size        maxBlockSize;  <span class="comment">/* maximum block size */</span></span><br><span class="line">    Size        nextBlockSize; <span class="comment">/* next block size to allocate */</span></span><br><span class="line">    AllocBlock  keeper;        <span class="comment">/* if not NULL, keep this block over resets */</span></span><br><span class="line">&#125; AllocSetContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> AllocSetContext *AllocSet;</span><br></pre></td></tr></table></figure>
<p>blocks是内存块链表，freelist是内存片链表。AllocSet所管理的内存区域被分成若干个内存块（AllocBlockData结构），每个内存块又被分成多个内存片（AllocChunkData结构）。palloc申请到的内存实际上都是内存片（除了超大块）。</p>
<hr>
<h2 id="AllocBlockData"><a href="#AllocBlockData" class="headerlink" title="AllocBlockData"></a>AllocBlockData</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AllocBlockData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    AllocSet    aset;     <span class="comment">/* aset that owns this block */</span></span><br><span class="line">    AllocBlock  next;     <span class="comment">/* next block in aset's blocks list */</span></span><br><span class="line">    <span class="keyword">char</span>       *freeptr;  <span class="comment">/* start of free space in this block */</span></span><br><span class="line">    <span class="keyword">char</span>       *endptr;   <span class="comment">/* end of space in this block */</span></span><br><span class="line">&#125; AllocBlockData;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="AllocChunkData"><a href="#AllocChunkData" class="headerlink" title="AllocChunkData"></a>AllocChunkData</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AllocChunkData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* aset is the owning aset if allocated, or the freelist link if free */</span></span><br><span class="line">    <span class="keyword">void</span>       *aset;</span><br><span class="line">    <span class="comment">/* size is always the size of the usable space in the chunk */</span></span><br><span class="line">    Size        <span class="built_in">size</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MEMORY_CONTEXT_CHECKING</span></span><br><span class="line">    <span class="comment">/* when debugging memory usage, also store actual requested size */</span></span><br><span class="line">    <span class="comment">/* this is zero in a free chunk */</span></span><br><span class="line">    Size        requested_size;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; AllocChunkData;</span><br></pre></td></tr></table></figure>
<hr>
<p><img src="/img/内存上下文结构.png" alt></p>
<hr>
<h1 id="重要函数"><a href="#重要函数" class="headerlink" title="重要函数"></a>重要函数</h1><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>MemoryContextCreate</td>
<td>创建上下文节点</td>
</tr>
<tr>
<td>AllocSetContextCreate</td>
<td>创建上下文实例</td>
</tr>
<tr>
<td>MemoryContextDelete</td>
<td>删除内存上下文</td>
</tr>
<tr>
<td>MemoryContextReset</td>
<td>重置内存上下文</td>
</tr>
<tr>
<td>MemoryContextSwitchTo</td>
<td>切换当前上下文</td>
</tr>
<tr>
<td>palloc</td>
<td>在当前上下文中申请内存</td>
</tr>
<tr>
<td>pfree</td>
<td>释放内存</td>
</tr>
<tr>
<td>repalloc</td>
<td>在当前上下文中重新申请内存</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><p><img src="/img/内存上下文总体应用.png" alt></p>
<hr>
<h2 id="palloc流程"><a href="#palloc流程" class="headerlink" title="palloc流程"></a>palloc流程</h2><p><img src="/img/palloc.png" alt></p>
<hr>
<h2 id="pfree流程"><a href="#pfree流程" class="headerlink" title="pfree流程"></a>pfree流程</h2><p><img src="/img/pfree.png" alt></p>
<hr>
<h1 id="重要的内存上下文"><a href="#重要的内存上下文" class="headerlink" title="重要的内存上下文"></a>重要的内存上下文</h1><table>
<thead>
<tr>
<th>内存上下文</th>
<th>生命周期</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>TopMemoryContext</td>
<td>session</td>
<td>根节点</td>
</tr>
<tr>
<td>PostmasterContext</td>
<td>session</td>
<td>postmaster工作上下文</td>
</tr>
<tr>
<td>CacheMemoryContext</td>
<td>session</td>
<td>backend的relcache、catcache等使用</td>
</tr>
<tr>
<td>MessageContext</td>
<td>session</td>
<td>保存从前端传来的命令以及派生的存储，比如查询计划树和查询分析树</td>
</tr>
<tr>
<td>TopTransactionContext</td>
<td>transaction</td>
<td>一般保存跨越多个子事务的状态和控制信息</td>
</tr>
<tr>
<td>CurTransactionContext</td>
<td>transaction</td>
<td>当前事务上下文</td>
</tr>
</tbody>
</table>
<hr>
<table>
<thead>
<tr>
<th>内存上下文</th>
<th>生命周期</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>PortalContext</td>
<td>portal</td>
<td>全局变量，指向当前portal</td>
</tr>
<tr>
<td>ErrorContext</td>
<td>session</td>
<td>错误处理上下文， errstart、errfinish、errmsg等在此分配内存</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="打印内存上下文树"><a href="#打印内存上下文树" class="headerlink" title="打印内存上下文树"></a>打印内存上下文树</h1><p>in smmgr/aset.c, add <code>#include &quot;utils/memutils.h&quot;</code><br>in AllocSetContextCreate function, add<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"pid=%d, Create Memory Context name is %s, parent context is %s\n"</span>,</span><br><span class="line">		MyProcPid, name, (parent == <span class="literal">NULL</span> ? <span class="string">"null"</span> : parent-&gt;name));</span><br></pre></td></tr></table></figure></p>
<p>in mmgr/mcxt.c, add <code>#include &quot;miscadmin.h&quot;</code><br>in MemoryContextDelete function, add<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"pid=%d, delete memory context name is %s, parent is %s\n"</span>,</span><br><span class="line">		MyProcPid, context-&gt;name, (context-&gt;parent == NULL? 'null' : context-&gt;parent-&gt;name));</span><br></pre></td></tr></table></figure></p>
<p>in MemoryContextReset function, add<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"pid=%d, reset memory context name is %s, parent is %s\n"</span>,</span><br><span class="line">		MyProcPid, context-&gt;name, (context-&gt;parent == NULL? 'null' : context-&gt;parent-&gt;name));</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">src<span class="meta-keyword">/backend/</span>utils<span class="meta-keyword">/mmgr/</span>mcxt.c</span><br><span class="line">src<span class="meta-keyword">/backend/</span>utils<span class="meta-keyword">/mmgr/</span>aset.c</span><br><span class="line">src<span class="meta-keyword">/include/</span>utils/memutils.h</span><br><span class="line">src<span class="meta-keyword">/include/</span>nodes/memnodes.h</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL查询和计划树绘图工具</title>
    <url>/2018/06/09/PostgreSQL%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%AE%A1%E5%88%92%E6%A0%91%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>使用Graphviz的dot工具绘制QueryStmt和PlanStmt。</p>
<p>工具地址：<a href="/download/dotpgstmt.sh">dotpgstmt</a></p>
<p>使用方法：</p>
<ol>
<li>获取查询树或计划树</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">postgres=# set client_min_messages to log;</span><br><span class="line">SET</span><br><span class="line">postgres=# set debug_print_parse to on;</span><br><span class="line">SET</span><br><span class="line">postgres=# select * from t;</span><br><span class="line">LOG:  parse tree:</span><br><span class="line">DETAIL:     &#123;QUERY </span><br><span class="line">   :commandType 1 </span><br><span class="line">   :querySource 0 </span><br><span class="line">   :canSetTag true </span><br><span class="line">   :utilityStmt &lt;&gt; </span><br><span class="line">   :resultRelation 0 </span><br><span class="line">   :hasAggs false </span><br><span class="line">   :hasWindowFuncs false </span><br><span class="line">   :hasTargetSRFs false </span><br><span class="line">   :hasSubLinks false </span><br><span class="line">   :hasDistinctOn false </span><br><span class="line">   :hasRecursive false </span><br><span class="line">   :hasModifyingCTE false </span><br><span class="line">   :hasForUpdate false </span><br><span class="line">   :hasRowSecurity false </span><br><span class="line">   :cteList &lt;&gt; </span><br><span class="line">   :rtable (</span><br><span class="line">      &#123;RTE </span><br><span class="line">      :alias &lt;&gt; </span><br><span class="line">      :eref </span><br><span class="line">         &#123;ALIAS </span><br><span class="line">         :aliasname t </span><br><span class="line">         :colnames ("id")</span><br><span class="line">         &#125;</span><br><span class="line">      :rtekind 0 </span><br><span class="line">      :relid 16498 </span><br><span class="line">      :relkind r </span><br><span class="line">      :tablesample &lt;&gt; </span><br><span class="line">      :lateral false </span><br><span class="line">      :inh true </span><br><span class="line">      :inFromCl true </span><br><span class="line">      :requiredPerms 2 </span><br><span class="line">      :checkAsUser 0 </span><br><span class="line">      :selectedCols (b 9)</span><br><span class="line">      :insertedCols (b)</span><br><span class="line">      :updatedCols (b)</span><br><span class="line">      :securityQuals &lt;&gt;</span><br><span class="line">      &#125;</span><br><span class="line">   )</span><br><span class="line">   :jointree </span><br><span class="line">      &#123;FROMEXPR </span><br><span class="line">      :fromlist (</span><br><span class="line">         &#123;RANGETBLREF </span><br><span class="line">         :rtindex 1</span><br><span class="line">         &#125;</span><br><span class="line">      )</span><br><span class="line">      :quals &lt;&gt;</span><br><span class="line">      &#125;</span><br><span class="line">   :targetList (</span><br><span class="line">      &#123;TARGETENTRY </span><br><span class="line">      :expr </span><br><span class="line">         &#123;VAR </span><br><span class="line">         :varno 1 </span><br><span class="line">         :varattno 1 </span><br><span class="line">         :vartype 23 </span><br><span class="line">         :vartypmod -1 </span><br><span class="line">         :varcollid 0 </span><br><span class="line">         :varlevelsup 0 </span><br><span class="line">         :varnoold 1 </span><br><span class="line">         :varoattno 1 </span><br><span class="line">         :location 7</span><br><span class="line">         &#125;</span><br><span class="line">      :resno 1 </span><br><span class="line">      :resname id </span><br><span class="line">      :ressortgroupref 0 </span><br><span class="line">      :resorigtbl 16498 </span><br><span class="line">      :resorigcol 1 </span><br><span class="line">      :resjunk false</span><br><span class="line">      &#125;</span><br><span class="line">   )</span><br><span class="line">   :override 0 </span><br><span class="line">   :onConflict &lt;&gt; </span><br><span class="line">   :returningList &lt;&gt; </span><br><span class="line">   :groupClause &lt;&gt; </span><br><span class="line">   :groupingSets &lt;&gt; </span><br><span class="line">   :havingQual &lt;&gt; </span><br><span class="line">   :windowClause &lt;&gt; </span><br><span class="line">   :distinctClause &lt;&gt; </span><br><span class="line">   :sortClause &lt;&gt; </span><br><span class="line">   :limitOffset &lt;&gt; </span><br><span class="line">   :limitCount &lt;&gt; </span><br><span class="line">   :rowMarks &lt;&gt; </span><br><span class="line">   :setOperations &lt;&gt; </span><br><span class="line">   :constraintDeps &lt;&gt; </span><br><span class="line">   :stmt_location 0 </span><br><span class="line">   :stmt_len 15</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>把<code>DETAIL:</code>之后的内容写入文件parse</p>
</li>
<li><p>绘图</p>
<p>./dotpgstmt.sh parse</p>
<p><img src="/img/parse.png" alt="parse"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>dot</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb</title>
    <url>/2017/10/23/gdb/</url>
    <content><![CDATA[<h1 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h1><p>gdb对信号处理有三类动作：停止、打印、传给程序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info handle # 查看所有信号的处理方式</span><br><span class="line">handle SIGUSR2 nostop noprint pass #设置信号处理方式</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>动作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>print</td>
<td>收到信号打印</td>
</tr>
<tr>
<td>noprint</td>
<td>收到信号不打印</td>
</tr>
<tr>
<td>stop</td>
<td>收到信号中断</td>
</tr>
<tr>
<td>notop</td>
<td>收到信号不中断</td>
</tr>
<tr>
<td>pass</td>
<td>收到信号传递给程序</td>
</tr>
<tr>
<td>nopass</td>
<td>收到信号不传递给程序</td>
</tr>
</tbody>
</table>
<h1 id="设置源代码路径"><a href="#设置源代码路径" class="headerlink" title="设置源代码路径"></a>设置源代码路径</h1><p>在A机器上gcc编译的执行文件test，放到B机器去执行。在B机器上gdb调试test，怎么在gdb中查看源代码。</p>
<p>有几种方法：</p>
<ol>
<li><p>把源代码放到编译机完全相同的路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -P .debug_str <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir &lt;code_dir&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用gdb的substitute-path路径映射功能</p>
<p><code>set substitute-path &lt;FROM&gt; &lt;TO&gt;</code></p>
<p>FROM是编译时的代码路径。上述命令等于替换路径前缀，用TO替换FROM。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -P .debug_str <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gdb ./<span class="built_in">test</span></span></span><br><span class="line">(gdb) set substitute-path /home/gdb/code/test /current-code</span><br><span class="line">(gdb) list</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用gdb的direcotory功能，把direcotry指定的路径加入到源代码搜索路径，缺点是不能递归搜索</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) show directories </span><br><span class="line">Source directories searched: $cdir:$cwd</span><br><span class="line">(gdb) directory /code</span><br><span class="line">(gdb) show directories </span><br><span class="line">Source directories searched: /home/postgres:$cdir:$cwd</span><br><span class="line">(gdb) list</span><br></pre></td></tr></table></figure>
</li>
<li><p>把二进制文件移动到源代码路径</p>
</li>
<li><p>编译时增加<code>-fdebug-prefix-map=old_path=new_path</code></p>
<p>在编译阶段用new_path替代old_path，这种方式比较暴力。</p>
</li>
</ol>
<h1 id="多进程调试"><a href="#多进程调试" class="headerlink" title="多进程调试"></a>多进程调试</h1><p>set follow-fork-mode [parent | child]</p>
<p>set detach-on-fork [on|off]</p>
<h1 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h1><p>调试多线程时，有时需要控制某些线程停在断点，有些线程继续执行。有时需要控制线程的运行顺序。有时需要中断某个线程，切换到其他线程。这些都可以通过gdb实现。</p>
<p>gdb调试线程的常用命令如下：</p>
<table>
<thead>
<tr>
<th>gdb命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>info thread</td>
<td>显示所有线程</td>
</tr>
<tr>
<td>thread ID</td>
<td>切换到ID指定的线程</td>
</tr>
<tr>
<td>break xxx.c:10 thread all</td>
<td>所有线程都在xxx.c文件的第10行断点，all可以换成单个线程ID</td>
</tr>
<tr>
<td>thread apply all COMMON</td>
<td>所有线程都执行COMMOND命令，也可以把all换成单个线程ID</td>
</tr>
<tr>
<td>set scheduler-locking off/on/step</td>
<td>在调试某一线程时，其他线程是否执行。off：不锁定任何线程，默认值。on：锁定其他线程，只有当前线程运行。step：在step单步调试时，只有被调试线程运行。</td>
</tr>
<tr>
<td>set non-stop on/off</td>
<td>当调试一个线程时，其他线程是否运行。默认off。</td>
</tr>
<tr>
<td>set pagination on/off</td>
<td>在使用backtrace时，在分页时是否停止。默认on。</td>
</tr>
<tr>
<td>set target-async on/off</td>
<td>同步和异步。同步，gdb在输出提示符之前等待程序报告一些线程已经终止的信息。而异步的则是直接返回。默认off。</td>
</tr>
</tbody>
</table>
<p>non-stop模式调试后台程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gdb</span><br><span class="line">(gdb) set non-stop on</span><br><span class="line">(gdb) set pagination off</span><br><span class="line">(gdb) set target-async on</span><br><span class="line">(gdb) attach 82373</span><br><span class="line">(gdb) info thread</span><br><span class="line">(gdb) thread apply all continue &amp;</span><br><span class="line">(gdb) thread 10</span><br><span class="line">(gdb) continue &amp;</span><br></pre></td></tr></table></figure>
<p>注意：在使用non-stop模式调试时，凡是执行continue操作时最好加上&amp;放入后台。否则如果continue之后当前线程没有产生断点，则回不到交互模式。</p>
<h1 id="打印相关"><a href="#打印相关" class="headerlink" title="打印相关"></a>打印相关</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set print address -- Set printing of addresses</span><br><span class="line">set print array -- Set prettyprinting of arrays</span><br><span class="line">set print array-indexes -- Set printing of array indexes</span><br><span class="line">set print asm-demangle -- Set demangling of C++/ObjC names in disassembly listings</span><br><span class="line">set print demangle -- Set demangling of encoded C++/ObjC names when displaying symbols</span><br><span class="line">set print elements -- Set limit on string chars or array elements to print</span><br><span class="line">set print frame-arguments -- Set printing of non-scalar frame arguments</span><br><span class="line">set print inferior-events -- Set printing of inferior events (e.g.</span><br><span class="line">set print max-symbolic-offset -- Set the largest offset that will be printed in &lt;symbol+1234&gt; form</span><br><span class="line">set print null-stop -- Set printing of char arrays to stop at first null char</span><br><span class="line">set print object -- Set printing of object's derived type based on vtable info</span><br><span class="line">set print pascal_static-members -- Set printing of pascal static members</span><br><span class="line">set print pretty -- Set prettyprinting of structures</span><br><span class="line">set print repeats -- Set threshold for repeated print elements</span><br><span class="line">set print sevenbit-strings -- Set printing of 8-bit characters in strings as \nnn</span><br><span class="line">set print static-members -- Set printing of C++ static members</span><br><span class="line">set print symbol-filename -- Set printing of source filename and line number with &lt;symbol&gt;</span><br><span class="line">set print thread-events -- Set printing of thread events (such as thread start and exit)</span><br><span class="line">set print union -- Set printing of unions interior to structures</span><br><span class="line">set print vtbl -- Set printing of C++ virtual function tables</span><br></pre></td></tr></table></figure>
<h1 id="LIBRARY-PATH与LD-LIBRARY-PATH"><a href="#LIBRARY-PATH与LD-LIBRARY-PATH" class="headerlink" title="LIBRARY_PATH与LD_LIBRARY_PATH"></a>LIBRARY_PATH与LD_LIBRARY_PATH</h1><p><code>LIBRARY_PATH</code>环境变量用于在程序编译期间查找动态链接库时指定查找共享库的路径。如果不指定<code>LIBRARY_PATH</code>，可以在gcc编译时通过-L指定共享库路径。</p>
<p><code>LD_LIBRARY_PATH</code>环境变量用于在程序加载运行期间查找动态链接库时指定除了系统默认路径之外的其他路径。注意，<code>LD_LIBRARY_PATH</code>中指定的路径会在系统默认路径之前进行查找。</p>
<p>使用方法：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LIBRARY_PATH=`<span class="built_in">pwd</span>`:<span class="variable">$LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=`<span class="built_in">pwd</span>`:<span class="variable">$LIBRARY_PATH</span></span><br><span class="line">或</span><br><span class="line">LIBRARY_PATH=`<span class="built_in">pwd</span>`:<span class="variable">$LIBRARY_PATH</span> make</span><br><span class="line">LD_LIBRARY_PATH=`<span class="built_in">pwd</span>`:<span class="variable">$LIBRARY_PATH</span> make</span><br></pre></td></tr></table></figure></p>
<h1 id="C-INCLUDE-PATH、CPLUS-INCLUDE-PATH"><a href="#C-INCLUDE-PATH、CPLUS-INCLUDE-PATH" class="headerlink" title="C_INCLUDE_PATH、CPLUS_INCLUDE_PATH"></a>C_INCLUDE_PATH、CPLUS_INCLUDE_PATH</h1><p>与LIBRARY_PATH类似，gcc编译期间查找指定的头文件路径。也可以在gcc加上-I参数指定头文件路径。</p>
<p>使用方法：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export C_INCLUDE_PATH=`pwd`/include:$C_INCLUDE_PATH</span><br><span class="line">或</span><br><span class="line">C_INCLUDE_PATH=`pwd`/include make</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>调试</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2018/07/31/git/</url>
    <content><![CDATA[<p>官方文档：<br><a href="/docs/progit_v2.1.15.pdf">progit_v2.1.15.pdf</a><br>来自：<br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p>
<h1 id="完整迁移"><a href="#完整迁移" class="headerlink" title="完整迁移"></a>完整迁移</h1><p>把本地git库localtest完整的迁移到github上的test库，保留提交记录:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> github端建立<span class="built_in">test</span>空白库</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地库镜像推送</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> localtest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git push --mirror git@github.com:yfshi/test.git</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>常用工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hostname的那点事</title>
    <url>/2017/09/19/hostname%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="hostname的本质"><a href="#hostname的本质" class="headerlink" title="hostname的本质"></a>hostname的本质</h1><p>hostname是Linux下的一个内核参数,保存在/proc/sys/kernel/hostname下,它的值是Linux启动时从rc.sysinit读取的.而/etc/rc.d/rc.sysinit中HOSTNAME的取值来自于/etc/sysconfig/network下的HOSTNAME.</p>
<blockquote>
<p>Linux的启动过程:</p>
<ol>
<li>加载BIOS</li>
<li>读取MBR</li>
<li>Boot Loader / Grup</li>
<li>加载内核</li>
<li>用户层init依据inittab文件来设定运行等级</li>
<li>init进程执行rc.sysinit</li>
<li>启动内核驱动模块</li>
<li>执行不同运行级别的脚本程序(/etc/rc.d/rc$RUNLEVEL)</li>
<li>执行/etc/rc.d/rc.local</li>
<li>执行/bin/login程序,进入登录状态</li>
</ol>
</blockquote>
<p>/etc/sysconifg/network内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME==server-111</span><br></pre></td></tr></table></figure>
<p>/etc/rc.d/rc.sysinit相关代码如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">HOSTNAME=$(/bin/hostname)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -m</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/sysconfig/network ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/sysconfig/network</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$HOSTNAME</span>"</span> -o <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"(none)"</span> ]; <span class="keyword">then</span></span><br><span class="line">    HOSTNAME=localhost</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">......</span><br><span class="line"><span class="comment"># Set the hostname.</span></span><br><span class="line">update_boot_stage RChostname</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h1 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h1><p>修改hostname有几种方式:</p>
<ol>
<li><code>hostname DB-Server</code> -- 运行后立即生效(新会话生效),系统重启后会丢失所做的修改</li>
<li><code>echo DB-Server &gt; /proc/sys/kernel/hostname</code> -- 运行后立即生效(新会话生效),系统重启后会丢失所做的修改</li>
<li><code>sysctl kernel.hostname=DB-Server</code> -- 运行后立即生效(新会话生效),系统重启后会丢失所做的修改</li>
<li>修改<code>/etc/sysconfig/network</code>下的<code>HOSTNAME</code>变量 -- 需重启系统生效,永久性修改</li>
</ol>
<p>修改了hostname后,如何使其立即生效而不用重启操作系统？  </p>
<p>先按照步骤四修改,然后从前3步中任选一个执行</p>
<h1 id="hostname与-etc-hosts"><a href="#hostname与-etc-hosts" class="headerlink" title="hostname与/etc/hosts"></a>hostname与/etc/hosts</h1><p>hosts的作用相当于DNS,提供IP地址到hostname的对应.早期的互联网计算机数量少,单机hosts文件里足够存放所有联网计算机.不过随着互联网的发展,这就远远不够了.于是就出现了分布式的DNS系统.由DNS服务器来提供类似的IP地址到域名的对应.具体可以man hosts查看相关信息.</p>
<p>Linux系统在向DNS服务器发出域名解析请求之前会查询/etc/hosts文件,如果里面有相应的记录,就会使用hosts里面的记录.<br>/etc/hosts文件通常里面包含这一条记录127.0.0.1 localhost.localdomain localhost.hosts文件格式是一行一条记录,分别是IP地址、hostname、aliases,三者用空白字符分隔,aliases可选.</p>
<p>127.0.0.1到localhost这一条建议不要修改,因为很多应用程序会用到这个,比如sendmail,修改之后这些程序可能就无法正常运行.</p>
<p>但是,其实hostname也不是说跟/etc/hosts一点关系都没有.在/etc/rc.d/rc.sysinit中,有如下逻辑判断,当hostname为localhost后localhost.localdomain时,将会使用接口IP地址对应的hostname来重新设置系统的hostname.</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>hostname</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables</title>
    <url>/2018/09/14/iptables/</url>
    <content><![CDATA[<h1 id="netfilter-iptables"><a href="#netfilter-iptables" class="headerlink" title="netfilter/iptables"></a>netfilter/iptables</h1><p>netfilter是linux内核2.4.x引入的一个子系统，作为一个通用的、抽象的框架，提供一整套的hook（钩子、检查点）函数的管理机制，使得诸如包过滤、网络地址转换(NAT)和基于协议类型的连接跟踪成为了可能。</p>
<p>netfilter的架构就是在整个网络流程的若干位置放置了一些检测点（hook），而在每个检测点上登记了一些处理函数进行处理。</p>
<p><img src="/img/iptables/netfilter-hook.jpg" alt></p>
<p>netfilter主要采用连线跟踪（Connection Tracking）、包过滤（Packet Filtering）、地址转换（NAT）、包处理（Packet Mangling)4种关键技术。</p>
<ul>
<li><p>连线跟踪</p>
<p>是包过滤、地址转换的基础，它作为一个独立的模块运行。采用连线跟踪技术在协议栈低层截取数据包，将当前数据包及其状态信息与历史数据包及其状态信息进行比较，从而得到当前数据包的控制信息，根据这些信息决定对网络数据包的操作，达到保护网络的目的。</p>
<p>当下层网络接收到初始化连接同步（Synchronize，SYN）包，将被netfilter规则库检查。该数据包将在规则链中依次序进行比较。如果该包应被丢弃，发送一个复位（Reset，RST）包到远端主机，否则连接接收。这次连接的信息将被保存在连线跟踪信息表中，并表明该数据包所应有的状态。这个连线跟踪信息表位于内核模式下，其后的网络包就将与此连线跟踪信息表中的内容进行比较，根据信息表中的信息来决定该数据包的操作。因为数据包首先是与连线跟踪信息表进行比较，只有SYN包才与规则库进行比较，数据包与连线跟踪信息表的比较都是在内核模式下进行的，所以速度很快。</p>
</li>
<li><p>包过滤</p>
<p>包过滤检查通过的每个数据包的头部，然后决定如何处置它们，可以选择丢弃，让包通过，或者更复杂的操作。</p>
</li>
<li><p>地址转换</p>
<p>网络地址转换分为源NAT（Source NAT，SNAT）和目的NAT（Destination NAT,DNAT）2种不同的类型。SNAT是指修改数据包的源地址（改变连接的源IP）。SNAT会在数据包送出之前的最后一刻做好转换工作。地址伪装（Masquerading）是SNAT的一种特殊形式。DNAT 是指修改数据包的目标地址（改变连接的目的IP）。DNAT 总是在数据包进入以后立即完成转换。端口转发、负载均衡和透明代理都属于DNAT。</p>
</li>
<li><p>包处理</p>
<p>利用包处理可以设置或改变数据包的服务类型（Type of Service,TOS）字段；改变包的生存期（Time to Live,TTL）字段；在包中设置标志值，利用该标志值可以进行带宽限制和分类查询。</p>
</li>
</ul>
<p>iptables是运行在用户空间的一个防火墙管理工具，真正的防火墙是netfilter。</p>
<p>netfilter组件是内核模块，iptables是用户空间工具。</p>
<p><img src="/img/iptables/system-netfilter-iptables.jpg" alt></p>
<h1 id="四表五链"><a href="#四表五链" class="headerlink" title="四表五链"></a>四表五链</h1><ul>
<li><p>规则（rule）</p>
</li>
<li><p>规则表（table）</p>
<p>实现特定功能的规则的集合。iptables内置了4个表，raw、mangle、nat、filter表，分表用于实现数据跟踪处理、包重构、网络地址转换和包过滤。</p>
</li>
<li><p>规则链（chain）</p>
<p>一个chain就是一个检查清单（钩子、hook），每一条链中可以有多个规则。一共预定义了五个规则链。</p>
</li>
<li><p>自定义链</p>
<p>用户可以自定义链。但是无法自动触发，需要由预定义链跳转过来。</p>
</li>
</ul>
<p><img src="/img/iptables/table-chain.jpg" alt></p>
<h1 id="网络数据流向"><a href="#网络数据流向" class="headerlink" title="网络数据流向"></a>网络数据流向</h1><p><img src="/img/iptables/网络数据流向.jpg" alt></p>
<p>有三条报文类型：</p>
<ul>
<li><p>进入本机的报文</p>
<p>网络 -&gt; PREROUTING -&gt; route -&gt; INPUT -&gt; 本机应用</p>
</li>
<li><p>本机发出的报文</p>
<p>本机应用 -&gt; route -&gt; OUTPUT -&gt; POSTROUTING</p>
</li>
<li><p>转发的报文</p>
<p>网路A -&gt; PREROUTING -&gt; route -&gt; FORWARD -&gt; POSTROUTING -&gt; 网络B</p>
</li>
</ul>
<h1 id="iptables用法"><a href="#iptables用法" class="headerlink" title="iptables用法"></a>iptables用法</h1><p>可以根据下面两图使用iptables</p>
<p><img src="/img/iptables/iptables-cmd.gif" alt></p>
<p><img src="/img/iptables/iptables-cmd1.jpg" alt></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="nat"><a href="#nat" class="headerlink" title="nat"></a>nat</h2><p>局域网通过snat网关上网；局域网的web服务器需要映射到外网；</p>
<p><img src="/img/iptables/snat.jpg" alt></p>
<p><img src="/img/iptables/dnat.jpg" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先打开路由转发功能</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl -w net.ipv4.ip_forward=1 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久生效方法 <span class="built_in">echo</span> <span class="string">"net.ipv4.ip_forward=1"</span>&gt;&gt;/etc/sysctl.conf &amp;&amp; sysctl -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> snat访问外网</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> dnat映射内网服务器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t nat -p tcp --dport 80 -A PREROUTING -i eth1 -j DNAT --to-destination 192.168.1.6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service iptables save</span></span><br></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>限制本机的web服务器在周一不允许访问； 新请求的速率不能超过100个每秒；web服务器包含了admin字符串的页面不允许访问；web 服务器仅允许响应报文离开本机；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 周一不允许访问</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp --dport 80 -m time ! --weekdays Mon -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A OUTPUT -p tcp --dport 80 -m state --state ESTABLISHED -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新请求速率不能超过100个每秒</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 100/s -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> web包含admin字符串的页面不允许访问，源端口：dport</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp --dport 80 -m string --algo bm --string <span class="string">'admin'</span> -j REJECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> web服务器仅允许响应报文离开主机,目标端口：sport</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT</span></span><br></pre></td></tr></table></figure>
<p>在工作时间，即周一到周五的8:30-18:00，开放本机的ftp服务给192.168.1.0网络中的主机访问；数据下载请求的次数每分钟不得超过 5 个；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp --dport 21 -s 192.168.1.0/24 -m time ! --weekdays 6,7 -m time --timestart 8:30 --timestop 18:00 -m connlimit --connlimit-above 5 -j ACCET</span></span><br></pre></td></tr></table></figure>
<p>开放本机的ssh服务给192.168.1.1-192.168.1.100 中的主机；新请求建立的速率一分钟不得超过2个；仅允许响应报文通过其服务端口离开本机；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp --dport 22 -m iprange --src-rang 192.168.1.1-192.168.1.100 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 2/m -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A OUTPUT -p tcp --sport 22 -m iprange --dst-rang 192.168.1.1-192.168.1.100 -m state --state ESTABLISHED -j ACCEPT</span></span><br></pre></td></tr></table></figure>
<p>拒绝 TCP 标志位全部为 1 及全部为 0 的报文访问本机；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP</span></span><br></pre></td></tr></table></figure>
<p>允许本机 ping 别的主机；但不开放别的主机 ping 本机；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp --icmp-type <span class="built_in">echo</span>-request -j DROP </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp --icmp-type <span class="built_in">echo</span>-reply -j ACCEPT </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp --icmp-type destination-Unreachable -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者下面禁ping操作：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span></span><br></pre></td></tr></table></figure>
<p>##　其他</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开通本机的22端口，允许192.168.1.0网段的服务器访问</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -s 192.168.1.0/24 -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开通本机的80端口，只允许192.168.1.150机器访问</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t filter -A INPUT -s 192.168.1.150/32 -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拒绝进入防火墙的所有ICMP协议数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp -j REJECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许防火墙转发除ICMP协议以外的所有数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -p ! icmp -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拒绝转发来自192.168.1.10主机的数据，允许转发来自192.168.0.0/24网段的数据</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -s 192.168.1.11 -j REJECT </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意一定要把拒绝的放在前面不然就不起作用了！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 丢弃从外网接口（eth1）进入防火墙本机的源地址为私网地址的数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只允许管理员从202.13.0.0/16网段使用SSH远程登录防火墙主机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -s 202.13.0.0/16 -p tcp -m tcp -m state --state NEW --dport 22  -j ACCEPT </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许本机开放从TCP端口20-1024提供的应用服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ptables -A INPUT -p tcp -m tcp -m state --state NEW --dport 20:1024 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 屏蔽环回(loopback)访问</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -i lo -j DROP</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A OUTPUT -o lo -j DROP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 屏蔽来自外部的ping，即禁止外部机器ping本机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p icmp --icmp-type <span class="built_in">echo</span>-request -j DROP</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A OUTPUT -p icmp --icmp-type <span class="built_in">echo</span>-reply -j DROP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 屏蔽从本机ping外部主机，禁止本机ping外部机器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A OUTPUT -p icmp --icmp-type <span class="built_in">echo</span>-request -j DROP</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p icmp --icmp-type <span class="built_in">echo</span>-reply -j DROP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止其他主机ping本机，但是允许本机ping其他主机（禁止别人ping本机，也可以使用<span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp --icmp-type <span class="built_in">echo</span>-request -j DROP </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp --icmp-type <span class="built_in">echo</span>-reply -j ACCEPT </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp --icmp-type destination-Unreachable -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止转发来自MAC地址为00：0C：29：27：55：3F的和主机的数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -m mac --mac-source 00:0c:29:27:55:3F -j DROP</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables中使用“-m 模块关键字”的形式调用显示匹配。咱们这里用“-m mac –mac-source”来表示数据包的源MAC地址</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许防火墙本机对外开放TCP端口20、21、25、110以及被动模式FTP端口1250-1280</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m multiport --dport 20,21,25,110,1250:1280 -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m tcp -m multiport --dports 22,80,443,1250-1280 -m state --state NEW -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以将这几个端口分开设置多行：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m tcp -m state --state NEW --dport 22 -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m tcp -m state --state NEW --dport 80 -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m tcp -m state --state NEW --dport 443 -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m tcp -m state --state NEW --dport 1250:1280 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">禁止转发源IP地址为192.168.1.20-192.168.1.99的TCP数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -p tcp -m iprange --src-range 192.168.1.20-192.168.1.99 -j DROP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止转发与正常TCP连接无关的非--syn请求数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -m state --state NEW -p tcp ! --syn -j DROP</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> “-m state”表示数据包的连接状态，“NEW”表示与任何连接无关的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拒绝访问防火墙的新数据包，但允许响应连接或与已有连接相关的数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m state --state NEW -j DROP </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> “ESTABLISHED”表示已经响应请求或者已经建立连接的数据包，“RELATED”表示与已建立的连接有相关性的，比如FTP数据连接等</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 防止DoS攻击</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -p tcp --dport 80 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 25/minute --<span class="built_in">limit</span>-burst 100 -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -m <span class="built_in">limit</span>: 启用<span class="built_in">limit</span>扩展，限制速度。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --<span class="built_in">limit</span> 25/minute: 允许最多每分钟25个连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --<span class="built_in">limit</span>-burst 100: 当达到100个连接后，才启用上述25/minute限制</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --icmp-type 8 表示 Echo request——回显请求（Ping请求）。下面表示本机ping主机192.168.1.109时候的限速设置：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -d 192.168.1.109 -p icmp --icmp-type 8 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 3/minute --<span class="built_in">limit</span>-burst 5 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果本地主机有两块网卡，一块连接内网(eth0)，一块连接外网(eth1)，那么可以使用下面的规则将eth0的数据路由到eht1：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拒绝进入防火墙的所有ICMP协议数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp -j REJECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许防火墙转发除ICMP协议以外的所有数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -p ! icmp -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拒绝转发来自192.168.1.10主机的数据，允许转发来自192.168.0.0/24网段的数据</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -s 192.168.1.11 -j REJECT </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意一定要把拒绝的放在前面不然就不起作用了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 丢弃从外网接口（eth1）进入防火墙本机的源地址为私网地址的数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -i eth1 -s 192.168.0.0/16 -j DROP </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -i eth1 -s 172.16.0.0/12 -j DROP </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A INPUT -i eth1 -s 10.0.0.0/8 -j DROP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假设现在本机外网网关是58.68.250.1，那么把HTTP请求转发到内部的一台服务器192.168.1.20的8888端口上，规则如下</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t nat -A PREROUTING -p tcp -i eth0 -d 58.68.250.1 --dport 8888 -j DNAT --to 192.168.1.20:80</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -A FORWARD -p tcp -i eth0 -d 192.168.0.2 --dport 80 -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t filter -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把所有10.8.0.0网段的数据包SNAT成192.168.5.3的ip然后发出去</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source 192.168.5.3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把所有10.8.0.0网段的数据包SNAT成192.168.5.3/192.168.5.4/192.168.5.5等几个ip然后发出去</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j SNAT --to-source 192.168.5.3-192.168.5.5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从服务器的网卡上，自动获取当前ip地址来做NAT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t nat -A POSTROUTING -s 10.8.0.0/255.255.255.0 -o eth0 -j MASQUERADE</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>netfilter</tag>
        <tag>snat</tag>
        <tag>dnat</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>kvm虚拟机</title>
    <url>/2018/02/09/kvm%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install kvm qemu-kvm libvirt-bin bridge-utils</span><br></pre></td></tr></table></figure>
<ul>
<li>kvm 内核模块，实现cpu虚拟化和内存管理</li>
<li>libvirt-bin 管理虚拟机</li>
<li>qemu-kvm 是虚拟机</li>
<li>bridge-utils 管理网桥</li>
</ul>
<p>如果只是使用命令行方式，上面的软件包已经足够。</p>
<p>下面是图形界面工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install virt-manager python-spice-client-gtk</span><br></pre></td></tr></table></figure>
<ul>
<li>virt-manager 图形界面的虚拟机管理程序，需要用到python-spice-client-gtk</li>
<li>python-spice-client-gtk</li>
</ul>
<h1 id="配置网桥"><a href="#配置网桥" class="headerlink" title="配置网桥"></a>配置网桥</h1><ol>
<li>手动配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brctl addbr br0</span><br><span class="line">brctl addif br0 eth0</span><br><span class="line">ip addr add 10.10.10.1/24 dev br0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>自动配置</p>
<p><strong>ubuntu</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet static</span><br><span class="line">	address 10.10.10.1</span><br><span class="line">	netmask 255.255.255.0</span><br><span class="line">	bridge_ports eth0</span><br><span class="line">	bridge_stp off</span><br><span class="line">	bridge_fd 0</span><br><span class="line">	bridge_maxwait 0</span><br></pre></td></tr></table></figure>
<p><strong>centos</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-script/ifcfg-br0</span><br><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=10.10.10.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">DELAY=0</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/network-script/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:15:xx:xx:xx:xx</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">BRIDGE=br0</span><br><span class="line">NM_CONTROLLED=no</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="使用命令行创建虚拟机"><a href="#使用命令行创建虚拟机" class="headerlink" title="使用命令行创建虚拟机"></a>使用命令行创建虚拟机</h1><ol>
<li><p>建立磁盘镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-img create -f qcow2 centos7.0.img 20G</span><br></pre></td></tr></table></figure>
<p>使用 qcow2 格式的磁盘镜像的好处就是它在创建之初并不会给它分配全部大小磁盘容量，而是随着虚拟机中文件的增加而逐渐增大。因此，它对空间的使用更加有效。</p>
</li>
<li><p>建立<code>xml</code>配置文件</p>
<p><code>linux</code>默认有<code>virtio</code>驱动，磁盘总线、网卡等可以设置为<code>virtio</code>。</p>
<p><code>windows</code>要使用<code>virtio</code>，需要安装<code>virtio</code>驱动。或者<code>windows</code>的<code>disk</code>的总线可以选择和宿主机一致比如是<code>sata</code>，网卡可以设置为<code>rt8139</code>，<code>&lt;hyperv&gt;...&lt;/hyperv&gt;</code>域是针对<code>windows</code>的优化。实际上使用时发现在机械硬盘是使用<code>windows</code>，<code>io</code>效率很低，无论是否使用<code>virtio</code>驱动，可能有什么地方需要优化没搞懂，后来把<code>windows</code>的存储放到<code>ssd</code>上了。</p>
<p><strong>centos7.0.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span> <span class="attr">type</span>=<span class="string">'kvm'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>centos7.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">currentMemory</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">currentMemory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">placement</span>=<span class="string">'static'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span> <span class="attr">arch</span>=<span class="string">'x86_64'</span>&gt;</span>hvm<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boot</span> <span class="attr">dev</span>=<span class="string">'cdrom'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boot</span> <span class="attr">dev</span>=<span class="string">'hd'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">features</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">acpi</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">apic</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vmport</span> <span class="attr">state</span>=<span class="string">'off'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">features</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpu</span> <span class="attr">mode</span>=<span class="string">'host-model'</span> <span class="attr">check</span>=<span class="string">'partial'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">model</span> <span class="attr">fallback</span>=<span class="string">'allow'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">clock</span> <span class="attr">offset</span>=<span class="string">'utc'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timer</span> <span class="attr">name</span>=<span class="string">'rtc'</span> <span class="attr">tickpolicy</span>=<span class="string">'catchup'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timer</span> <span class="attr">name</span>=<span class="string">'pit'</span> <span class="attr">tickpolicy</span>=<span class="string">'delay'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timer</span> <span class="attr">name</span>=<span class="string">'hpet'</span> <span class="attr">present</span>=<span class="string">'no'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">clock</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">on_poweroff</span>&gt;</span>destroy<span class="tag">&lt;/<span class="name">on_poweroff</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">on_reboot</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_reboot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">on_crash</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">on_crash</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">suspend-to-mem</span> <span class="attr">enabled</span>=<span class="string">'no'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">suspend-to-disk</span> <span class="attr">enabled</span>=<span class="string">'no'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">emulator</span>&gt;</span>/usr/bin/kvm<span class="tag">&lt;/<span class="name">emulator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">'file'</span> <span class="attr">device</span>=<span class="string">'disk'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">'qemu'</span> <span class="attr">type</span>=<span class="string">'qcow2'</span> <span class="attr">cache</span>=<span class="string">'writeback'</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">'/vmhosts/kvm/centos7.0.qcow2'</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">'vda'</span> <span class="attr">bus</span>=<span class="string">'virtio'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">'file'</span> <span class="attr">device</span>=<span class="string">'cdrom'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">'qemu'</span> <span class="attr">type</span>=<span class="string">'raw'</span> <span class="attr">cache</span>=<span class="string">'none'</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">'/iso/centos7.0.iso'</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">'hda'</span> <span class="attr">bus</span>=<span class="string">'ide'</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">readonly</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">'bridge'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span> <span class="attr">bridge</span>=<span class="string">'br0'</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">'virtio'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'tablet'</span> <span class="attr">bus</span>=<span class="string">'usb'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'mouse'</span> <span class="attr">bus</span>=<span class="string">'ps2'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'keyboard'</span> <span class="attr">bus</span>=<span class="string">'ps2'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">graphics</span> <span class="attr">type</span>=<span class="string">'vnc'</span> <span class="attr">port</span>=<span class="string">'-1'</span> <span class="attr">autoport</span>=<span class="string">'yes'</span> <span class="attr">listen</span>=<span class="string">'0.0.0.0'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">listen</span> <span class="attr">type</span>=<span class="string">'address'</span> <span class="attr">address</span>=<span class="string">'0.0.0.0'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">graphics</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>win7</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;domain type='kvm'&gt;</span><br><span class="line">  &lt;name&gt;win7&lt;/name&gt;</span><br><span class="line">  &lt;memory unit='KiB'&gt;2097152&lt;/memory&gt;</span><br><span class="line">  &lt;currentMemory unit='KiB'&gt;2097152&lt;/currentMemory&gt;</span><br><span class="line">  &lt;vcpu placement='static'&gt;2&lt;/vcpu&gt;</span><br><span class="line">  &lt;os&gt;</span><br><span class="line">    &lt;type arch='x86_64'&gt;hvm&lt;/type&gt;</span><br><span class="line">    &lt;boot dev='cdrom'/&gt;</span><br><span class="line">    &lt;boot dev='hd'/&gt;</span><br><span class="line">  &lt;/os&gt;</span><br><span class="line">  &lt;features&gt;</span><br><span class="line">    &lt;acpi/&gt;</span><br><span class="line">    &lt;apic/&gt;</span><br><span class="line">    &lt;hyperv&gt;</span><br><span class="line">      &lt;relaxed state='on'/&gt;</span><br><span class="line">      &lt;vapic state='on'/&gt;</span><br><span class="line">      &lt;spinlocks state='on' retries='4096'/&gt;</span><br><span class="line">      &lt;vpindex state='on'/&gt;</span><br><span class="line">      &lt;runtime state='on'/&gt;</span><br><span class="line">      &lt;synic state='on'/&gt;</span><br><span class="line">      &lt;reset state='on'/&gt;</span><br><span class="line">    &lt;/hyperv&gt;</span><br><span class="line">    &lt;vmport state='off'/&gt;</span><br><span class="line">  &lt;/features&gt;</span><br><span class="line">  &lt;cpu mode='host-model' check='partial'&gt;</span><br><span class="line">    &lt;model fallback='allow'/&gt;</span><br><span class="line">  &lt;/cpu&gt;</span><br><span class="line">  &lt;clock offset='localtime'&gt;</span><br><span class="line">    &lt;timer name='rtc' tickpolicy='catchup'/&gt;</span><br><span class="line">    &lt;timer name='pit' tickpolicy='delay'/&gt;</span><br><span class="line">    &lt;timer name='hpet' present='no'/&gt;</span><br><span class="line">    &lt;timer name='hypervclock' present='yes'/&gt;</span><br><span class="line">  &lt;/clock&gt;</span><br><span class="line">  &lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;</span><br><span class="line">  &lt;on_reboot&gt;restart&lt;/on_reboot&gt;</span><br><span class="line">  &lt;on_crash&gt;restart&lt;/on_crash&gt;</span><br><span class="line">  &lt;pm&gt;</span><br><span class="line">    &lt;suspend-to-mem enabled='no'/&gt;</span><br><span class="line">    &lt;suspend-to-disk enabled='no'/&gt;</span><br><span class="line">  &lt;/pm&gt;</span><br><span class="line">  &lt;devices&gt;</span><br><span class="line">    &lt;emulator&gt;/usr/bin/kvm&lt;/emulator&gt;</span><br><span class="line">    &lt;disk type='file' device='disk'&gt;</span><br><span class="line">      &lt;driver name='qemu' type='qcow2' cache='writeback'/&gt;</span><br><span class="line">      &lt;source file='/vmhosts/kvm/centos7.0.qcow2'/&gt;</span><br><span class="line">      &lt;target dev='sda' bus='sata'/&gt;</span><br><span class="line">    &lt;/disk&gt;</span><br><span class="line">    &lt;disk type='file' device='cdrom'&gt;</span><br><span class="line">      &lt;driver name='qemu' type='raw' cache='none'/&gt;</span><br><span class="line">      &lt;source file='/iso/win7.iso'/&gt;</span><br><span class="line">      &lt;target dev='hda' bus='ide'/&gt;</span><br><span class="line">      &lt;readonly/&gt;</span><br><span class="line">    &lt;/disk&gt;</span><br><span class="line">    &lt;interface type='bridge'&gt;</span><br><span class="line">      &lt;source bridge='br0'/&gt;</span><br><span class="line">      &lt;model type='rt8139'/&gt;</span><br><span class="line">    &lt;/interface&gt;</span><br><span class="line">    &lt;input type='tablet' bus='usb'/&gt;</span><br><span class="line">    &lt;input type='mouse' bus='ps2'/&gt;</span><br><span class="line">    &lt;input type='keyboard' bus='ps2'/&gt;</span><br><span class="line">    &lt;graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'&gt;</span><br><span class="line">      &lt;listen type='address' address='0.0.0.0'/&gt;</span><br><span class="line">    &lt;/graphics&gt;</span><br><span class="line">  &lt;/devices&gt;</span><br><span class="line">&lt;/domain&gt;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>定义虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virsh define centos7.0.xml</span><br><span class="line">virsh list --all</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virsh start centos7.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装系统</p>
<p>通过vnc客户端连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vncviwer localhost:5900</span><br></pre></td></tr></table></figure>
<p>安装好系统，装完必要的环境之后可以把存储(centos7.0.qcow2)备份。之后再需要系统时直接拷贝过来使用即可。</p>
</li>
<li><p>常用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virsh list #显示本地活动虚拟机</span><br><span class="line">virsh list –-all #显示本地所有的虚拟机（活动的+不活动的）</span><br><span class="line">virsh define ubuntu.xml #通过配置文件定义一个虚拟机（这个虚拟机还不是活动的）</span><br><span class="line">virsh start ubuntu #启动名字为ubuntu的非活动虚拟机</span><br><span class="line">virsh create ubuntu.xml # 创建虚拟机（创建后，虚拟机立即执行，成为活动主机）</span><br><span class="line">virsh suspend ubuntu # 暂停虚拟机</span><br><span class="line">virsh resume ubuntu # 启动暂停的虚拟机</span><br><span class="line">virsh shutdown ubuntu # 正常关闭虚拟机</span><br><span class="line">virsh destroy ubuntu # 强制关闭虚拟机</span><br><span class="line">virsh dominfo ubuntu #显示虚拟机的基本信息</span><br><span class="line">virsh domname 2 # 显示id号为2的虚拟机名</span><br><span class="line">virsh domid ubuntu # 显示虚拟机id号</span><br><span class="line">virsh domuuid ubuntu # 显示虚拟机的uuid</span><br><span class="line">virsh domstate ubuntu # 显示虚拟机的当前状态</span><br><span class="line">virsh dumpxml ubuntu # 显示虚拟机的当前配置文件（可能和定义虚拟机时的配置不同，因为当虚拟机启动时，需要给虚拟机分配id号、uuid、vnc端口号等等）</span><br><span class="line">virsh setmem ubuntu 512000 #给不活动虚拟机设置内存大小</span><br><span class="line">virsh setvcpus ubuntu 4 # 给不活动虚拟机设置cpu个数</span><br><span class="line">virsh edit ubuntu # 编辑配置文件（一般是在刚定义完虚拟机之后）</span><br><span class="line"></span><br><span class="line">libvirt还提供了一个shell:virsh，直接执行名virsh即可获得一个特殊的shell:virsh，在这个virsh里面可以执行上面的命令与本地libvirt交互，还可以通过命令connect命令连接远程libvirt，与之交互，例如：connect xen+ssh://root@10.0.0.11。另外可以只执行一条远程libvirt命令：virsh –c xen+ssh://root@10.0.0.11 list –all</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="快照管理"><a href="#快照管理" class="headerlink" title="快照管理"></a>快照管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> virsh --<span class="built_in">help</span> | grep snapshot</span></span><br><span class="line">snapshot-create                Create a snapshot from XML</span><br><span class="line">snapshot-create-as             Create a snapshot from a set of args</span><br><span class="line">snapshot-current               Get or set the current snapshot</span><br><span class="line">snapshot-delete                Delete a domain snapshot</span><br><span class="line">snapshot-dumpxml               Dump XML for a domain snapshot</span><br><span class="line">snapshot-edit                  edit XML for a snapshot</span><br><span class="line">snapshot-info                  snapshot information</span><br><span class="line">snapshot-list                  List snapshots for a domain</span><br><span class="line">snapshot-parent                Get the name of the parent of a snapshot</span><br><span class="line">snapshot-revert                Revert a domain to a snapshot</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> virsh list</span></span><br><span class="line"> Id    Name                           State</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> 1     win7                           running</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> virsh snapshot-create-as win7 snapshot-haozip_360_npp_wps</span></span><br><span class="line">Domain snapshot snapshot-haozip_360_npp_wps created</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> qemu-img info win7.qcow2</span></span><br><span class="line">image: win7.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 100G (107374182400 bytes)</span><br><span class="line">disk size: 14G</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Snapshot list:</span><br><span class="line">ID        TAG                 VM SIZE                DATE       VM CLOCK</span><br><span class="line">1         snapshot-haozip_360_npp_wps   1.8G 2018-03-07 10:14:03   01:15:31.438</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: false</span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> virsh snapshot-list win7</span></span><br><span class="line"> Name                 Creation Time             State</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> snapshot-haozip_360_npp_wps 2018-03-07 10:14:03 +0800 running</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> virsh snapshot-info win7 --snapshotname snapshot-haozip_360_npp_wps</span></span><br><span class="line">Name:           snapshot-haozip_360_npp_wps</span><br><span class="line">Domain:         win7</span><br><span class="line">Current:        yes</span><br><span class="line">State:          running</span><br><span class="line">Location:       internal</span><br><span class="line">Parent:         -</span><br><span class="line">Children:       0</span><br><span class="line">Descendants:    0</span><br><span class="line">Metadata:       yes</span><br></pre></td></tr></table></figure>
<h1 id="虚拟磁盘扩容"><a href="#虚拟磁盘扩容" class="headerlink" title="虚拟磁盘扩容"></a>虚拟磁盘扩容</h1><p>磁盘扩容或添加之后要到虚拟机内部做分区、格式化、自动挂在等操作。</p>
<ol>
<li><p>磁盘扩容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> qemu-img resize win7.qcow +10G</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>磁盘添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> qemu-img create -f qcow2 win7_1 10G</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> virsh shutdown win7</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> virsh edit win7</span></span><br><span class="line">&lt;disk&gt;&lt;/disk&gt;在原有的disk下面添加一个disk配置：</span><br><span class="line">-- 修改file路径</span><br><span class="line">-- target中的dev修改为vdb</span><br><span class="line">-- 删除address</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h1><p>通过执行名virt-manager，启动libvirt的图形界面，在图形界面下可以一步一步的创建虚拟机，管理虚拟机，还可以直接控制虚拟机的桌面。​</p>
]]></content>
      <categories>
        <category>常用工具</category>
      </categories>
      <tags>
        <tag>kvm</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>linux终端快捷键</title>
    <url>/2018/12/27/linux%E7%BB%88%E7%AB%AF%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<blockquote>
<p>linux中的许多操作在终端（Terminal）中十分的快捷。</p>
</blockquote>
<ul>
<li>光标操作</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+A(ahead)</td>
<td>移动到行首</td>
</tr>
<tr>
<td>Ctrl+E(end)</td>
<td>移动到行尾</td>
</tr>
<tr>
<td>Ctrl+Left</td>
<td>移动到上一个单词的词首</td>
</tr>
<tr>
<td>Ctrl+Right</td>
<td>移动到下一个单词的词尾</td>
</tr>
<tr>
<td>Ctrl+F(forwards)</td>
<td>向后移动一个字符</td>
</tr>
<tr>
<td>Ctrl+B(backwards)</td>
<td>向前移动一个字符</td>
</tr>
<tr>
<td>Esc+F</td>
<td>移动到当前单词的词尾</td>
</tr>
<tr>
<td>Esc+B</td>
<td>移动到当前单词的词首</td>
</tr>
</tbody>
</table>
<ul>
<li>文本处理操作</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+U</td>
<td>剪切光标到行首的内容</td>
</tr>
<tr>
<td>Ctrl+K</td>
<td>剪切光标到行尾的内容</td>
</tr>
<tr>
<td>Ctrl+W</td>
<td>剪切光标到词首的内容</td>
</tr>
<tr>
<td>Alt+D</td>
<td>剪切光标到词尾的内容</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>删除光标前的字符，相当于Backspace</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>删除光标后的字符，相当于Delete</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td>粘贴删除或剪切的字符</td>
</tr>
<tr>
<td>Ctrl+7</td>
<td>恢复刚才的内容</td>
</tr>
</tbody>
</table>
<ul>
<li>历史命令操作</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+P(previous)</td>
<td>显示上一条命令</td>
</tr>
<tr>
<td>Ctrl+N(next)</td>
<td>显示下一条命令</td>
</tr>
<tr>
<td>!Num</td>
<td>执行命令历史表的第Num条命令</td>
</tr>
<tr>
<td>!!</td>
<td>执行上一条命令</td>
</tr>
<tr>
<td>!$</td>
<td>上一条命令的最后一个参数</td>
</tr>
<tr>
<td>Ctrl+R(retrive)</td>
<td>向上搜索历史命令</td>
</tr>
</tbody>
</table>
<ul>
<li>窗口操作</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shift+Ctrl+N</td>
<td>新建窗口</td>
</tr>
<tr>
<td>Shift+Ctrl+Q</td>
<td>关闭终端</td>
</tr>
<tr>
<td>F11</td>
<td>全屏</td>
</tr>
<tr>
<td>Ctrl+Plus</td>
<td>放大</td>
</tr>
<tr>
<td>Ctrl+Minus</td>
<td>缩小</td>
</tr>
<tr>
<td>Ctrl+0</td>
<td>原始大小</td>
</tr>
<tr>
<td>Shirt+Up</td>
<td>向上滚屏</td>
</tr>
<tr>
<td>Shift+Down</td>
<td>向下滚屏</td>
</tr>
<tr>
<td>Shift+PageUp</td>
<td>向上翻页</td>
</tr>
<tr>
<td>Shift+PageDown</td>
<td>向下翻页</td>
</tr>
</tbody>
</table>
<ul>
<li>任务处理操作</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+C</td>
<td>删除整行/终止</td>
</tr>
<tr>
<td>Ctrl+L</td>
<td>刷新屏幕</td>
</tr>
<tr>
<td>Ctrl+S</td>
<td>挂起当前shell</td>
</tr>
<tr>
<td>Ctrl+Q</td>
<td>重新启用挂起的shell</td>
</tr>
</tbody>
</table>
<ul>
<li>标签页处理操作</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shift+Ctrl+T</td>
<td>新建标签页</td>
</tr>
<tr>
<td>Shift+Ctrl+W</td>
<td>关闭标签页</td>
</tr>
<tr>
<td>Ctrl+PageUp</td>
<td>前一标签页</td>
</tr>
<tr>
<td>Ctrl+PageDown</td>
<td>后一标签页</td>
</tr>
<tr>
<td>Shift+Ctrl+PageUp</td>
<td>标签页左移</td>
</tr>
<tr>
<td>Shift+Ctrl+PageDown</td>
<td>标签页右移</td>
</tr>
<tr>
<td>Alt+1,2,3…</td>
<td>切换到标签页1,2,3…</td>
</tr>
</tbody>
</table>
<ul>
<li>其他操作</li>
</ul>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>pgbouncer--greenplum测试</title>
    <url>/2018/07/19/pgbouncer-greenplum%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p>系统：CentOS release 6.5 (Final)</p>
<p>节点：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>地址</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>h1</td>
<td>192.168.2.114</td>
<td>master,seg0~seg7,mirror(seg8~seg15)</td>
</tr>
<tr>
<td>h2</td>
<td>192.168.2.115</td>
<td>standby,seg8~seg15,mirror(seg0~seg7)</td>
</tr>
</tbody>
</table>
<p>连接数：</p>
<ul>
<li>pgbouncer — 100 —&gt; master</li>
<li>client — 1000 —&gt; pgbouncer</li>
</ul>
<p>用户：yfshi/123456</p>
<h1 id="greenplum"><a href="#greenplum" class="headerlink" title="greenplum"></a>greenplum</h1><h2 id="配置交互key"><a href="#配置交互key" class="headerlink" title="配置交互key"></a>配置交互key</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gpssh-exkeys -h h1 -h h2</span></span><br></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>略</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul>
<li><p>初始化数据目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpssh -h h1 -h h2</span></span><br><span class="line">=&gt; mkdir -p /home/yfshi/gpdata/master</span><br><span class="line">=&gt; mkdir -p /home/yfshi/gpdata/primary</span><br><span class="line">=&gt; mkdir -p /home/yfshi/gpdata/mirror</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置gpinitsystem_config</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ARRAY_NAME="Greenplum Data Platform"</span><br><span class="line">SEG_PREFIX=gpseg</span><br><span class="line">PORT_BASE=64300</span><br><span class="line">declare -a DATA_DIRECTORY=(/home/yfshi/gpdata/primary /home/yfshi/gpdata/primary /home/yfshi/gpdata/primary /home/yfshi/gpdata/primary /home/yfshi/gpdata/primary /home/yfshi/gpdata/primary /home/yfshi/gpdata/primary /home/yfshi/gpdata/primary)</span><br><span class="line">MASTER_HOSTNAME=h1</span><br><span class="line">MASTER_DIRECTORY=/home/yfshi/gpdata/master</span><br><span class="line">MASTER_PORT=65432</span><br><span class="line">TRUSTED_SHELL=ssh</span><br><span class="line">CHECK_POINT_SEGMENTS=8</span><br><span class="line">ENCODING=UNICODE</span><br><span class="line"></span><br><span class="line">MIRROR_PORT_BASE=64400</span><br><span class="line">REPLICATION_PORT_BASE=64500</span><br><span class="line">MIRROR_REPLICATION_PORT_BASE=64600</span><br><span class="line">declare -a MIRROR_DATA_DIRECTORY=(/home/yfshi/gpdata/mirror /home/yfshi/gpdata/mirror /home/yfshi/gpdata/mirror /home/yfshi/gpdata/mirror /home/yfshi/gpdata/mirror /home/yfshi/gpdata/mirror /home/yfshi/gpdata/mirror /home/yfshi/gpdata/mirror)</span><br><span class="line"></span><br><span class="line">MACHINE_LIST_FILE=/home/yfshi/config/hostfile_gpinitsystem</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置hostfile_gpinitsystem</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">h1</span><br><span class="line">h2</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpinitsystem -c gpinitsystem_config -s h2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="pgbouncer测试1000连接数"><a href="#pgbouncer测试1000连接数" class="headerlink" title="pgbouncer测试1000连接数"></a>pgbouncer测试1000连接数</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><p>pgbouncer.ini</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[databases]</span><br><span class="line">pgbench = host=127.0.0.1 dbname=pgbench user=yfshi port=65432</span><br><span class="line">postgres = host=127.0.0.1 dbname=pgbench user=yfshi port=65432</span><br><span class="line">[pgbouncer]</span><br><span class="line">logfile = /home/yfshi/pgbouncer/var/log/pgbouncer.log   # 日志文件</span><br><span class="line">pidfile = /home/yfshi/pgbouncer/var/log/pgbouncer.pid   # pid文件</span><br><span class="line">listen_addr = 127.0.0.1          # 监听地址</span><br><span class="line">listen_port = 6543               # 监听端口</span><br><span class="line">auth_type = trust</span><br><span class="line">auth_file = /home/yfshi/pgbouncer/etc/userlist.txt      # 用户认证文件</span><br><span class="line">pool_mode = session</span><br><span class="line">server_reset_query = DISCARD ALL</span><br><span class="line">max_client_conn = 1000           # pgbouncer的客户端最大连接数</span><br><span class="line">default_pool_size = 100          # 连接池大小</span><br><span class="line">admin_users = yfshi              # 管理员，pgbouncer内部使用</span><br></pre></td></tr></table></figure>
</li>
<li><p>userlist.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"admin" "111111"</span><br><span class="line">"yfshi" "111111"</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pgbouncer -d pgbouncer.ini</span></span><br></pre></td></tr></table></figure>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><blockquote>
<p>pbouncer提供了类似连接到虚拟数据库pgbouncer,然后执行一些特殊命令的功能,这些命令就像是执行一个真正的SQL命令,让管理者能查询和管理pgbouncer的连接池信息,这个界面为pgbouncer的Console控制界面.一般使用psql命令连接到这个虚拟数据库上.<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> psql -p6543 pgbouncer</span></span><br><span class="line">psql (9.6.3, server 1.7.2/bouncer)</span><br><span class="line">Type "help" for help.</span><br><span class="line"></span><br><span class="line">pgbouncer=#</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>show help</p>
<blockquote>
<p>NOTICE:  Console usage<br>DETAIL:<br>    SHOW HELP|CONFIG|DATABASES|POOLS|CLIENTS|SERVERS|VERSION<br>    SHOW FDS|SOCKETS|ACTIVE_SOCKETS|LISTS|MEM<br>    SHOW DNS_HOSTS|DNS_ZONES<br>    SHOW STATS|STATS_TOTALS|STATS_AVERAGES<br>    SET key = arg<br>    RELOAD<br>    PAUSE [<db>]<br>    RESUME [<db>]<br>    DISABLE <db><br>    ENABLE <db><br>    KILL <db><br>    SUSPEND<br>    SHUTDOWN<br>SHOW</db></db></db></db></db></p>
</blockquote>
<p>show config</p>
<blockquote>
<p>显示当前配置设置,一个配置一行,字段如下:</p>
<ul>
<li>key：配置变量名称 </li>
<li>value：配置值 </li>
<li>changeable：yes 或 no,显示这个变量是否可以在运行时修改如果为 no,那么这个变量只能在启动的时候修改</li>
</ul>
</blockquote>
<p>下表是执行show config;的结果。一下的key都可以在pgbouncer.ini的[pgbouncer]中配置：</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
<th>changeable</th>
</tr>
</thead>
<tbody>
<tr>
<td>job_name</td>
<td>pgbouncer</td>
<td>no</td>
</tr>
<tr>
<td>conffile</td>
<td>pgbouncer.ini</td>
<td>yes</td>
</tr>
<tr>
<td>logfile</td>
<td>/home/yfshi/pgbouncer/pgbouncer.log</td>
<td>yes</td>
</tr>
<tr>
<td>pidfile</td>
<td>/home/yfshi/pgbouncer/pgbouncer.pid</td>
<td>no</td>
</tr>
<tr>
<td>listen_addr</td>
<td>192.168.2.113</td>
<td>no</td>
</tr>
<tr>
<td>listen_port</td>
<td>55556</td>
<td>no</td>
</tr>
<tr>
<td>listen_backlog</td>
<td>128</td>
<td>no</td>
</tr>
<tr>
<td>unix_socket_dir</td>
<td>/tmp</td>
<td>no</td>
</tr>
<tr>
<td>unix_socket_mode</td>
<td>511</td>
<td>no</td>
</tr>
<tr>
<td>unix_socket_group</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>auth_type</td>
<td>trust</td>
<td>yes</td>
</tr>
<tr>
<td>auth_file</td>
<td>/home/yfshi/pgbouncer/userlist.txt</td>
<td>yes</td>
</tr>
<tr>
<td>auth_hba_file</td>
<td></td>
<td>yes</td>
</tr>
<tr>
<td>auth_user</td>
<td></td>
<td>yes</td>
</tr>
<tr>
<td>auth_query</td>
<td>SELECT usename, passwd FROM pg_shadow WHERE usename=$1</td>
<td>yes</td>
</tr>
<tr>
<td>pool_mode</td>
<td>session</td>
<td>yes</td>
</tr>
<tr>
<td>max_client_conn</td>
<td>200</td>
<td>yes</td>
</tr>
<tr>
<td>default_pool_size</td>
<td>100</td>
<td>yes</td>
</tr>
<tr>
<td>min_pool_size</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>reserve_pool_size</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>reserve_pool_timeout</td>
<td>5</td>
<td>yes</td>
</tr>
<tr>
<td>max_db_connections</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>max_user_connections</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>syslog</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>syslog_facility</td>
<td>daemon</td>
<td>yes</td>
</tr>
<tr>
<td>syslog_ident</td>
<td>pgbouncer</td>
<td>yes</td>
</tr>
<tr>
<td>user</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>autodb_idle_timeout</td>
<td>3600</td>
<td>yes</td>
</tr>
<tr>
<td>server_reset_query</td>
<td>DISCARD ALL</td>
<td>yes</td>
</tr>
<tr>
<td>server_reset_query_always</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>server_check_query</td>
<td>select 1</td>
<td>yes</td>
</tr>
<tr>
<td>server_check_delay</td>
<td>30</td>
<td>yes</td>
</tr>
<tr>
<td>query_timeout</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>query_wait_timeout</td>
<td>120</td>
<td>yes</td>
</tr>
<tr>
<td>client_idle_timeout</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>client_login_timeout</td>
<td>60</td>
<td>yes</td>
</tr>
<tr>
<td>idle_transaction_timeout</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>server_lifetime</td>
<td>3600</td>
<td>yes</td>
</tr>
<tr>
<td>server_idle_timeout</td>
<td>600</td>
<td>yes</td>
</tr>
<tr>
<td>server_connect_timeout</td>
<td>15</td>
<td>yes</td>
</tr>
<tr>
<td>server_login_retry</td>
<td>15</td>
<td>yes</td>
</tr>
<tr>
<td>server_round_robin</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>suspend_timeout</td>
<td>10</td>
<td>yes</td>
</tr>
<tr>
<td>ignore_startup_parameters</td>
<td></td>
<td>yes</td>
</tr>
<tr>
<td>disable_pqexec</td>
<td>0</td>
<td>no</td>
</tr>
<tr>
<td>dns_max_ttl</td>
<td>15</td>
<td>yes</td>
</tr>
<tr>
<td>dns_nxdomain_ttl</td>
<td>15</td>
<td>yes</td>
</tr>
<tr>
<td>dns_zone_check_period</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>max_packet_size</td>
<td>2147483647</td>
<td>yes</td>
</tr>
<tr>
<td>pkt_buf</td>
<td>4096</td>
<td>no</td>
</tr>
<tr>
<td>sbuf_loopcnt</td>
<td>5</td>
<td>yes</td>
</tr>
<tr>
<td>tcp_defer_accept</td>
<td>1</td>
<td>yes</td>
</tr>
<tr>
<td>tcp_socket_buffer</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>tcp_keepalive</td>
<td>1</td>
<td>yes</td>
</tr>
<tr>
<td>tcp_keepcnt</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>tcp_keepidle</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>tcp_keepintvl</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>verbose</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>admin_users</td>
<td>yfshi</td>
<td>yes</td>
</tr>
<tr>
<td>stats_users</td>
<td></td>
<td>yes</td>
</tr>
<tr>
<td>stats_period</td>
<td>60</td>
<td>yes</td>
</tr>
<tr>
<td>log_connections</td>
<td>1</td>
<td>yes</td>
</tr>
<tr>
<td>log_disconnections</td>
<td>1</td>
<td>yes</td>
</tr>
<tr>
<td>log_pooler_errors</td>
<td>1</td>
<td>yes</td>
</tr>
<tr>
<td>application_name_add_host</td>
<td>0</td>
<td>yes</td>
</tr>
<tr>
<td>client_tls_sslmode</td>
<td>disable</td>
<td>no</td>
</tr>
<tr>
<td>client_tls_ca_file</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>client_tls_cert_file</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>client_tls_key_file</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>client_tls_protocols</td>
<td>all</td>
<td>no</td>
</tr>
<tr>
<td>client_tls_ciphers</td>
<td>fast</td>
<td>no</td>
</tr>
<tr>
<td>client_tls_dheparams</td>
<td>auto</td>
<td>no</td>
</tr>
<tr>
<td>client_tls_ecdhcurve</td>
<td>auto</td>
<td>no</td>
</tr>
<tr>
<td>server_tls_sslmode</td>
<td>disable</td>
<td>no</td>
</tr>
<tr>
<td>server_tls_ca_file</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>server_tls_cert_file</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>server_tls_key_file</td>
<td></td>
<td>no</td>
</tr>
<tr>
<td>server_tls_protocols</td>
<td>all</td>
<td>no</td>
</tr>
<tr>
<td>server_tls_ciphers</td>
<td>HIGH:MEDIUM:+3DES:!aNULL</td>
<td>no</td>
</tr>
</tbody>
</table>
<p>show pools</p>
<blockquote>
<p>列出连接池 </p>
<ul>
<li>database：数据库名 </li>
<li>user：用户名</li>
<li>cl_active：当前 active (活跃)的客户端连接的个数</li>
<li>cl_waiting：当前 waiting (等待)的客户端连接个数</li>
<li>sv_active：当前 active (活跃)的服务器连接个数</li>
<li>sv_idle：当前 idle (空闲) 的服务器连接个数</li>
<li>sv_used：当前 used (在使用)的服务器连接个数</li>
<li>sv_tested：当前 tested (测试过)的服务器连接个数</li>
<li>sv_login：当前 login (登录)到 PostgreSQL 服务器的个数</li>
<li>maxwait：队列中第一个(最老的那个)客户端等待的时间长度,单位是秒.如果这个数值开始上升,那么就意味着当前的连接池中的服务器处理请求的速度不够快.原因可能是服务器过载,也可能只是 pool_size 太小</li>
</ul>
</blockquote>
<p>show stats</p>
<blockquote>
<ul>
<li>database：统计是根据每个数据库分比例的</li>
<li>total_requests：连接池处理的SQL请求的总数</li>
<li>total_received：接收到的网络流量的总字节数</li>
<li>total_sent：发出的网络流量的总字节数</li>
<li>total_query_time：活跃在与数据库上面的时间开销总数,单位是微秒</li>
<li>avg_req：在最后一次统计过程中的每秒平均请求数</li>
<li>avg_recv：每秒(从客户端)接收到的平均数据量</li>
<li>avg_sent：每秒发送(给客户端)的平均数据量</li>
<li>avg_query：平均的查询时间,单位是微秒</li>
</ul>
</blockquote>
<p>show servers</p>
<blockquote>
<p>列出数据库与pgbouncer之间连接 </p>
<ul>
<li>type：S,表示服务器 </li>
<li>user：gbouncer用于连接服务器的用户名 </li>
<li>database：服务器端的数据库名 </li>
<li>state：pgbouncer 服务器连接的状态 active、used、idle </li>
<li>addr：PostgreSQL服务器的IP地址 </li>
<li>port：PostgreSQL服务器的端口 </li>
<li>local_addr：本地机器上的发起连接地址 </li>
<li>local_port：本地机器上的发起连接端口 </li>
<li>connect_time：连接建立的时间 </li>
<li>request_time：请求发出的时间 </li>
<li>ptr：这个连接的内部对象地址,用做唯一 ID </li>
<li>link：这个服务器对应的客户端地址</li>
</ul>
</blockquote>
<p>show clients</p>
<blockquote>
<p>列出客户端及客户端连接状态 </p>
<ul>
<li>type：C,表示客户端 </li>
<li>user：客户端连接的用户 </li>
<li>database：数据库名 </li>
<li>state：客户端连接的状态 active、used、waiting或者idle之一 </li>
<li>addr：客户端的 IP 地址 </li>
<li>port：客户端连接去的端口 </li>
<li>local_addr：本地机器上连接到的对端地址 </li>
<li>local_port：本地机器上的连接到的对端端口 </li>
<li>connect_time：最后的客户端连接的时间戳 </li>
<li>request_time：最后的客户端请求的时间戳 </li>
<li>ptr：这个连接的内部对象的地址,用做唯一 ID </li>
<li>link：这个客户端连接对应的服务器的地址</li>
</ul>
</blockquote>
<p>show lists</p>
<blockquote>
<p>显示连接池的计数信息 </p>
<ul>
<li>databases：数据库的个数 </li>
<li>users：用户的个数 </li>
<li>pools：连接池的个数 </li>
<li>free_clients：空闲客户端的个数 </li>
<li>used_clients：已用的客户端的个数 </li>
<li>login_clients：处于已登录状态的客户端个数 </li>
<li>free_servers：空闲服务器个数 </li>
<li>used_servers：已用服务器个数</li>
</ul>
</blockquote>
<p>show databases</p>
<blockquote>
<p>列出pgbouncer数据库别名及相关数据库 </p>
<ul>
<li>name：已配置的数据库名字记录 </li>
<li>host：pgbouncer 连接到的主机名 </li>
<li>port：pgbouncer 连接到的端口号 </li>
<li>database：pgbouncer 实际连接的数据库名 </li>
<li>force_user：当用户是连接字串的一部分的时候,在 pgbouncer 和 PostgreSQL 之间的连接会强制成给出的用户,不管 client user 是什么 </li>
<li>pool_size：最大的服务器端连接数目</li>
</ul>
</blockquote>
<p>show fds</p>
<blockquote>
<p>显示正在使用的 fd 列表如果连接的用户的用户名是 “pgbouncer”,那么通过 unix socket 连接,并且和运行的进程有同样的 UID,实际的 fd 列表是通过这个连接传递的这个机制用于做在线重启 </p>
<ul>
<li>fd：文件描述符的数字值 </li>
<li>task：pooler,client 或 server 之一 </li>
<li>user：使用该 FD 的连接用户 </li>
<li>database：使用该 FD 的连接的数据库 </li>
<li>addr：使用该 FD 的连接的 IP 地址,如果使用的是 unix socket,就是 unix </li>
<li>port：使用该 FD 的连接的端口号 </li>
<li>cancel：这个连接的取消键字 </li>
<li>link：对应的服务器/客户端的 fd如果为 idle (空闲)则为 NULL</li>
</ul>
</blockquote>
<p>DISABLE <db></db></p>
<blockquote>
<p>拒绝指定数据库上所有新客户端连接</p>
</blockquote>
<p>ENALBLE <db></db></p>
<blockquote>
<p>准许之前DISABLE命令之后的新客户端连接</p>
</blockquote>
<p>PAUSE [<db>]</db></p>
<blockquote>
<p>尝试从所有服务器断开连接(等待query完成),在所有query完成之前,此命令不会返回,在数据库重新启动时使用.如果给出了数据库名字则只对该数据库有用</p>
</blockquote>
<p>KILL <db></db></p>
<blockquote>
<p>立即删除给定数据库上所有客户端以及数据库连接</p>
</blockquote>
<p>SUPEND</p>
<blockquote>
<p>刷新所有socket缓存,并且停止监听,在缓存flush之前此命令不会有任何返回.使用场景:pgbouncer在线重新启动时使用</p>
</blockquote>
<p>RESUME [<db>]</db></p>
<blockquote>
<p>从之前PAUSE或者SUPEND命令恢复之前状态</p>
</blockquote>
<p>SHUTDOWN</p>
<blockquote>
<p>pgbouncer进程退出</p>
</blockquote>
<p>RELOAD</p>
<blockquote>
<p>重新加载其配置文件并更新配置</p>
</blockquote>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li><p>只读查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pgbench -p6543 -i pgbench</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pgbench -p6543 -n -S -c 1000 -t 1 pgbench</span></span><br><span class="line">transaction type: SELECT only</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 1000</span><br><span class="line">number of threads: 1</span><br><span class="line">number of transactions per client: 1</span><br><span class="line">number of transactions actually processed: 1000/1000</span><br><span class="line">tps = 713.361402 (including connections establishing)</span><br><span class="line">tps = 866.376950 (excluding connections establishing)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql -p6543 pgbench</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> SELECT count(*) from pg_stat_activity;</span></span><br><span class="line"> count </span><br><span class="line">-------</span><br><span class="line">   100</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>
</li>
<li><p>行存插入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> psql -p6543 -c <span class="string">"create table table_h(id serial, n1 varchar(20), n2 varchar(20)) distributed by (id);"</span> pgbench;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"insert into table_h(n1,n2) values('n1','n2')"</span> &gt; test.sql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pgbench -p6543 -n -f test.sql -c 1000 -t 1 pgbench</span></span><br><span class="line">transaction type: Custom query</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 1000</span><br><span class="line">number of threads: 1</span><br><span class="line">number of transactions per client: 1</span><br><span class="line">number of transactions actually processed: 1000/1000</span><br><span class="line">tps = 207.016064 (including connections establishing)</span><br><span class="line">tps = 217.756804 (excluding connections establishing)</span><br></pre></td></tr></table></figure>
</li>
<li><p>列存插入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> psql -p6543 -c <span class="string">"create table table_c(id serial, n1 varchar(20), n2 varchar(20)) with (appendonly=true,orientation=column,compresstype=zlib,COMPRESSLEVEL=5) distributed by (id);"</span> pgbench;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"insert into table_c(n1,n2) values('n1','n2')"</span> &gt; test.sql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pgbench -p6543 -n -f test.sql -c 1000 -t 1 pgbench</span></span><br><span class="line">transaction type: Custom query</span><br><span class="line">scaling factor: 1</span><br><span class="line">query mode: simple</span><br><span class="line">number of clients: 1000</span><br><span class="line">number of threads: 1</span><br><span class="line">number of transactions per client: 1</span><br><span class="line">number of transactions actually processed: 1000/1000</span><br><span class="line">tps = 64.295818 (including connections establishing)</span><br><span class="line">tps = 65.290265 (excluding connections establishing)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>pgbouncer</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/2017/10/23/shell/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title="--"></a><code>--</code></h1><p>shell内置命令，表示选项的结束，也就是说后面都是参数，不在有选项。主要是为了避免后面的参数以<code>-</code>开头的时候被识别为选项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat <span class="string">"abc-Rdef"</span> | grep -R</span><br><span class="line">cat <span class="string">"abc-Rdef"</span> | grep -- -R</span><br></pre></td></tr></table></figure>
<p>删除以‘-’开头的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -f -f</span><br><span class="line">rm -f -- -f</span><br></pre></td></tr></table></figure>
<h1 id="-1"><a href="#-1" class="headerlink" title="-"></a><code>-</code></h1><p><code>tar -cvf - * | tar -xvf - -C /tmp</code>复制当前目录并且时间不变。</p>
<h1 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h1><p>eval解析两次，第一次替换变量，第二次执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=<span class="string">"ls -l"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$a</span></span><br></pre></td></tr></table></figure>
<h1 id="变量的间接引用-var"><a href="#变量的间接引用-var" class="headerlink" title="变量的间接引用 ${!var}"></a>变量的间接引用 ${!var}</h1><p>即以变量名作为新的变量，取新变量的值<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>() &#123;</span><br><span class="line">	v=<span class="variable">$1</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$&#123;!v&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">x=10</span><br><span class="line"><span class="built_in">test</span> x</span><br></pre></td></tr></table></figure></p>
<h1 id="getopt与getopts"><a href="#getopt与getopts" class="headerlink" title="getopt与getopts"></a>getopt与getopts</h1><p>getopt可以处理unix和GNU格式的参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">GETOPT_ARGS=`getopt -o abc:d::e -al aaa,bbb,ccc:,ddd::,eee -- <span class="string">"<span class="variable">$@</span>"</span>`</span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">"<span class="variable">$GETOPT_ARGS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"after getopt: <span class="variable">$0</span> <span class="variable">$@</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">		-a|--aaa) <span class="built_in">echo</span> <span class="string">"option <span class="variable">$1</span>"</span>; <span class="built_in">shift</span>;;</span><br><span class="line">		-b|--bbb) <span class="built_in">echo</span> <span class="string">"option <span class="variable">$1</span>"</span>; <span class="built_in">shift</span>;;</span><br><span class="line">		-c|--ccc) <span class="built_in">echo</span> <span class="string">"option <span class="variable">$1</span> <span class="variable">$2</span>"</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">		-d|--ddd)</span><br><span class="line">			<span class="keyword">case</span> <span class="variable">$2</span> <span class="keyword">in</span></span><br><span class="line">				<span class="string">""</span>) <span class="built_in">echo</span> <span class="string">"option <span class="variable">$1</span>"</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">				*) <span class="built_in">echo</span> <span class="string">"option <span class="variable">$1</span> <span class="variable">$2</span>"</span>; <span class="built_in">shift</span> 2;;</span><br><span class="line">			<span class="keyword">esac</span></span><br><span class="line">			;;</span><br><span class="line">		-e|--eee) <span class="built_in">echo</span> <span class="string">"option <span class="variable">$1</span>"</span>; <span class="built_in">shift</span>;;</span><br><span class="line">		--) <span class="built_in">shift</span>; <span class="built_in">break</span>;;</span><br><span class="line">		*) <span class="built_in">echo</span> <span class="string">"unknown: <span class="variable">$1</span>"</span>; <span class="built_in">exit</span> 1;;</span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>getopts处理unix格式的参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> abc:d:e opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">"<span class="variable">$opt</span>"</span> <span class="keyword">in</span></span><br><span class="line">		a) <span class="built_in">echo</span> <span class="string">"-a"</span>;;</span><br><span class="line">		b) <span class="built_in">echo</span> <span class="string">"-b"</span>;;</span><br><span class="line">		c) <span class="built_in">echo</span> <span class="string">"-c <span class="variable">$OPTARG</span>"</span>;;</span><br><span class="line">		d) <span class="built_in">echo</span> <span class="string">"-d <span class="variable">$OPTARG</span>"</span>;;</span><br><span class="line">		e) <span class="built_in">echo</span> <span class="string">"-e"</span>;;</span><br><span class="line">		*) <span class="built_in">echo</span> <span class="string">"unkown"</span></span><br><span class="line">			<span class="built_in">exit</span> 2;;</span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>上面是一段shell中命令行处理的实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DBHOME=<span class="string">"<span class="variable">$GPHOME</span>"</span></span><br><span class="line">UPDATEFILE=<span class="string">""</span></span><br><span class="line">HOSTFILE=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">ROOTDIR=`<span class="built_in">pwd</span>`</span><br><span class="line">BASEDIR=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line">PROGRAM=<span class="variable">$&#123;0##*/&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">Usage</span></span>() &#123;</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$PROGRAM</span> is a local dongle update tool."</span></span><br><span class="line">	<span class="built_in">echo</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Usage:"</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"  <span class="variable">$PROGRAM</span> [OPTION] UPDATEFILE"</span></span><br><span class="line">	<span class="built_in">echo</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Options:"</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"  -d DBHOME         Database installation path, default \"\$GPHOME\"."</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"  -f HOSTFILE       This specifies the file that lists the hosts"</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"                    onto which you want to install Greenplum Database."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show help</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$1</span>"</span> = <span class="string">"x--help"</span> ] || [ <span class="string">"x<span class="variable">$1</span>"</span> = <span class="string">"x-?"</span> ]; <span class="keyword">then</span></span><br><span class="line">	Usage</span><br><span class="line">	<span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"d:f:"</span> opt;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">		d)</span><br><span class="line">			DBHOME=<span class="variable">$OPTARG</span></span><br><span class="line">			;;</span><br><span class="line">		f)</span><br><span class="line">			HOSTFILE=<span class="variable">$OPTARG</span></span><br><span class="line">			;;</span><br><span class="line">		?)</span><br><span class="line">			<span class="built_in">echo</span> <span class="string">"Invalid options: -<span class="variable">$OPTARG</span>"</span></span><br><span class="line">			<span class="built_in">exit</span> 1;;</span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UPDATEFILE</span></span><br><span class="line"><span class="built_in">eval</span> UPDATEFILE=<span class="string">"$"</span><span class="string">"<span class="variable">$OPTIND</span>"</span></span><br></pre></td></tr></table></figure>
<h1 id="exec与文件描述符"><a href="#exec与文件描述符" class="headerlink" title="exec与文件描述符"></a>exec与文件描述符</h1><p>对于Linux而言，所有对设备和文件的操作都使用文件描述符来进行的。<br>通常，一个进程启动时，会打开3个文件描述符：标准输入、标准输出、标准错误。对应的描述符分别是0、1、2。</p>
<ul>
<li>exec分配文件描述符</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 6&lt;&gt;hello.txt   <span class="comment"># 以读写方式绑定文件到描述符6</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> &gt;&amp;6    <span class="comment"># 写入“hello”，这里将会从文件开头进行覆盖</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"world"</span> &gt;&amp;6    <span class="comment"># 写入“world”，新的一行</span></span><br><span class="line"><span class="built_in">exec</span> 6&gt;&amp;-           <span class="comment"># 关闭写，实际上也不能读了</span></span><br><span class="line"><span class="built_in">exec</span> 6&lt;&amp;-           <span class="comment"># 关闭读，实际上也不能写了</span></span><br></pre></td></tr></table></figure>
<ul>
<li>输出重定向</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 1&gt;hello.txt    <span class="comment"># 将标准输出重定向到文件，从此之后该进程的输出都将被写入”hello.txt“</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"wolrd"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>恢复重定向</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 100&gt;&amp;1</span><br><span class="line"><span class="built_in">exec</span> 1&gt;hello.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"world"</span></span><br><span class="line"><span class="built_in">exec</span> 1&gt;&amp;100 100&gt;&amp;-</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"reset"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>输入重定向</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 100&lt;&amp;0</span><br><span class="line"><span class="built_in">exec</span> &lt;hello.txt</span><br><span class="line"><span class="built_in">read</span> <span class="variable">$line1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line1</span></span><br><span class="line"><span class="built_in">read</span> <span class="variable">$line2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line2</span></span><br><span class="line"><span class="built_in">exec</span> 0&lt;&amp;100 100&gt;&amp;-</span><br><span class="line"><span class="built_in">read</span> <span class="variable">$line3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>例子</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把标准输出和标准错误绑定到指定文件，并使用两个临时描述符变量保存标准输出和标准错误，用于恢复</span></span><br><span class="line"><span class="function"><span class="title">openlog</span></span>() &#123;</span><br><span class="line">	file=<span class="variable">$1</span></span><br><span class="line">	<span class="built_in">exec</span> 6&gt;&amp;1     <span class="comment"># 把6绑定到标准输出，即把标准输出1复制到6</span></span><br><span class="line">	<span class="built_in">exec</span> 7&gt;&amp;2     <span class="comment"># 把7绑定到标准错误</span></span><br><span class="line">	<span class="built_in">exec</span> 1&gt;<span class="variable">$file</span>  <span class="comment"># 把标准输出绑定到文件  exec 1&gt;$file 是绑定追加</span></span><br><span class="line">	<span class="built_in">exec</span> 2&gt;<span class="variable">$file</span>  <span class="comment"># 把标准错误绑定到文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复标准输出和标准错误，关闭临时描述符6和7</span></span><br><span class="line"><span class="function"><span class="title">closelog</span></span>() &#123;</span><br><span class="line">	<span class="built_in">exec</span> 1&gt;&amp;6 6&gt;&amp;-</span><br><span class="line">	<span class="built_in">exec</span> 2&gt;&amp;7 7&gt;&amp;-</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">openlog logfile</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"=================="</span></span><br><span class="line">ls /proc/self/fd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"=================="</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"world"</span></span><br><span class="line"></span><br><span class="line">closelog</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"=================="</span></span><br><span class="line">ls /proc/self/fd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"=================="</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"111"</span></span><br></pre></td></tr></table></figure>
<h1 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h1><p>如下，每个进程的任务就是等待10秒，进程任务完成之后再启动一个新的进程，保证并发数是8。<br>通过命名管道控制进程数量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">tmpfifo=$$.fifo</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">"exec 1000&gt;&amp;-;exec 1000&lt;&amp;-;exit 0"</span> 2 3 15</span><br><span class="line"></span><br><span class="line">mkfifo <span class="variable">$tmpfifo</span></span><br><span class="line"><span class="built_in">exec</span> 1000&lt;&gt;<span class="variable">$tmpfifo</span></span><br><span class="line">rm -f <span class="variable">$tmpfifo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=8;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> &gt;&amp;1000</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">let</span> t++</span><br><span class="line">	<span class="built_in">read</span> -u 1000</span><br><span class="line">	&#123;</span><br><span class="line">		sleep 10</span><br><span class="line">		<span class="built_in">echo</span> &gt;&amp;1000</span><br><span class="line">	&#125; &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"done!!!"</span></span><br></pre></td></tr></table></figure>
<h1 id="格式判断"><a href="#格式判断" class="headerlink" title="格式判断"></a>格式判断</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_format</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> <span class="built_in">type</span>=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> var=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">local</span> ret=0</span><br><span class="line"></span><br><span class="line">    [ <span class="variable">$#</span> -ne 2 ] &amp;&amp; <span class="built_in">return</span> 1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$type</span> <span class="keyword">in</span></span><br><span class="line">        <span class="string">"STRING"</span>)</span><br><span class="line">            [ <span class="string">"x<span class="variable">$var</span>"</span> = <span class="string">"x"</span> ] &amp;&amp; ret=2</span><br><span class="line">            ;;  </span><br><span class="line">        <span class="string">"NUMBER"</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$var</span> | grep -Ev <span class="string">'^[0-9]&#123;1,&#125;$'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; ret=2</span><br><span class="line">            ;;  </span><br><span class="line">        *)  </span><br><span class="line">            ret=2</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$ret</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ `check_format NUMBER asdfsa` -ne 0 ] &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<h1 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><p>shell如何用指定的分隔符来分割字符串为一个数组？这里介绍两种方法</p>
<p>方法一</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">string=<span class="string">"hello,shell,word"</span></span><br><span class="line">array=(<span class="variable">$&#123;string//,/ &#125;</span>)</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>方法二</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">string=<span class="string">"hello,shell,word"</span></span><br><span class="line">OLD_IFS=<span class="string">"<span class="variable">$IFS</span>"</span></span><br><span class="line">IFS=<span class="string">","</span></span><br><span class="line">array=(<span class="variable">$string</span>)</span><br><span class="line">IFS=<span class="string">"<span class="variable">$OLD_IFS</span>"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$&#123;array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><table>
<thead>
<tr>
<th style="text-align:left">格式</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">${string:start:length}</td>
<td style="text-align:left">从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。</td>
</tr>
<tr>
<td style="text-align:left">${string:start}</td>
<td style="text-align:left">从 string 字符串的左边第 start 个字符开始截取，直到最后。</td>
</tr>
<tr>
<td style="text-align:left">${string:0-start:length}</td>
<td style="text-align:left">从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。</td>
</tr>
<tr>
<td style="text-align:left">${string:0-start}</td>
<td style="text-align:left">从 string 字符串的右边第 start 个字符开始截取，直到最后。</td>
</tr>
<tr>
<td style="text-align:left">${string#*chars}</td>
<td style="text-align:left">从 string 字符串第一次出现 <em>chars 的位置开始，截取 </em>chars 右边的所有字符。</td>
</tr>
<tr>
<td style="text-align:left">${string##*chars}</td>
<td style="text-align:left">从 string 字符串最后一次出现 <em>chars 的位置开始，截取 </em>chars 右边的所有字符。</td>
</tr>
<tr>
<td style="text-align:left">${string%chars*}</td>
<td style="text-align:left">从 string 字符串第一次出现 <em>chars 的位置开始，截取 </em>chars 左边的所有字符。</td>
</tr>
<tr>
<td style="text-align:left">${string%%chars*}</td>
<td style="text-align:left">从 string 字符串最后一次出现 <em>chars 的位置开始，截取 </em>chars 左边的所有字符。</td>
</tr>
</tbody>
</table>
<h3 id="从指定位置开始截取"><a href="#从指定位置开始截取" class="headerlink" title="从指定位置开始截取"></a>从指定位置开始截取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;string:start:length&#125;</span></span><br><span class="line"><span class="variable">$&#123;string:0-start:length&#125;</span></span><br></pre></td></tr></table></figure>
<p>string是要截取的字符串，start是起始位置，length是要截取的长度（省略表示直到字符串的末尾）。</p>
<p>注意：</p>
<ol>
<li>从左边开始计数，其实数字是0；从右边开始计数，其实数字是1。</li>
<li>不管从哪边开始计数，截取方向都是从左到右。</li>
</ol>
<p>例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">"abcdefghijklmn"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url:2&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url:5:3&#125;</span>       </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url:0-3&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url:0-10:5&#125;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cdefghijklmn</span><br><span class="line">fgh</span><br><span class="line">lmn</span><br><span class="line">efghi</span><br></pre></td></tr></table></figure>
<h3 id="从指定字符串开始截取"><a href="#从指定字符串开始截取" class="headerlink" title="从指定字符串开始截取"></a>从指定字符串开始截取</h3><p>这种截取方式无法指定长度，只能从指定字符串截取到字符串末尾。可以截取指定字符串右边的所有字符，也可以截取左边的所有字符。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;string#*chars&#125;</span></span><br><span class="line"><span class="variable">$&#123;string##*chars&#125;</span></span><br><span class="line"><span class="variable">$&#123;string%chars*&#125;</span></span><br><span class="line"><span class="variable">$&#123;string%%chars*&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中，string是要截取的字符串，chars是指定的字符串，<code>*</code>是通配符的一种，表示任意长度的字符串。<code>*chars</code>连起来使用的意思是忽略左边的所有字符，知道遇见chars。</p>
<p>例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">"1234123412341234"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url#*23&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url##*23&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%23*&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%%23*&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T -o StrictHostKeyChecking=no &lt;&lt;EOF</span><br><span class="line"><span class="comment"># 不允许定义和使用变量，可以读取外部变量，不能给外部变量赋值</span></span><br><span class="line"><span class="comment"># 可以定义函数，函数内部不能使用变量和参数，不能使用外部函数</span></span><br><span class="line"><span class="comment"># 此处执行子shell无效，等同与在ssh之外执行，如`ls`和$(ls)</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>win10通过hyper-v安装虚拟机</title>
    <url>/2018/04/20/win10%E9%80%9A%E8%BF%87hyper-v%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="安装Hyper-v组件"><a href="#安装Hyper-v组件" class="headerlink" title="安装Hyper-v组件"></a>安装Hyper-v组件</h1><p>控制面板 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能 -&gt; 选中Hyper-V -&gt; 确定</p>
<p><img src="/img/HV-Windows功能.PNG" alt="Windows功能"></p>
<p>开始菜单 -&gt; Windows管理工具 -&gt; Hyper-v管理器</p>
<h1 id="配置Hyper-V网络"><a href="#配置Hyper-V网络" class="headerlink" title="配置Hyper-V网络"></a>配置Hyper-V网络</h1><p>打开虚拟交换机管理器创建虚拟交换机。一般使用内部或外部。</p>
<p><img src="/img/HV-虚拟交换机管理器.jpg" alt="虚拟交换机管理器"></p>
<ul>
<li><p>外部</p>
<p>网桥方式，相当于物理网卡。</p>
</li>
<li><p>内部</p>
<p>nat方式，可以连接主机，可以通过主机上网。</p>
</li>
<li><p>专用</p>
<p>虚拟机使用，不能和主机通信。</p>
</li>
</ul>
<h1 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h1><h2 id="新建虚拟机向导"><a href="#新建虚拟机向导" class="headerlink" title="新建虚拟机向导"></a>新建虚拟机向导</h2><p><img src="/img/HV-向导-名称和位置.jpg" alt="向导-名称和位置"></p>
<p><img src="/img/HV-向导-指定虚拟机为1代.jpg" alt="向导-指定虚拟机为1代"></p>
<p><img src="/img/HV-向导-设置硬盘.jpg" alt="向导-设置硬盘"></p>
<h2 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h2><p>关闭自动检查点，没什么用处</p>
<p><img src="/img/HV-关闭自动检查点.jpg" alt="关闭自动检查点"></p>
<p>添加磁盘驱动器</p>
<p><img src="/img/HV-设置硬盘.jpg" alt="设置硬盘"></p>
<p>新建或使用已经存在的磁盘（可以通过拷贝其他虚拟机的磁盘到新建的虚拟机方式克隆）</p>
<p><img src="/img/HV-新建或附加ing盘.jpg" alt="新建或附加ing盘"></p>
<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>右键连接，启动系统安装</p>
<p><img src="/img/HV-连接.jpg" alt="连接"></p>
<p>安装系统并初始化配置，之后创建检查点</p>
]]></content>
      <categories>
        <category>常用工具</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
        <tag>Hyper-V</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2017/10/22/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>冒泡排序（Bubble Sort）一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作重复地进行直到没有再需要交换。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<h1 id="排序效果"><a href="#排序效果" class="headerlink" title="排序效果"></a>排序效果</h1><p><img src="/img/冒泡排序.gif" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[ARR_SIZE];</span><br><span class="line"></span><br><span class="line">	RandInitArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	BubbleSortAsc(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		arr[i] = <span class="built_in">random</span>()%<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">move</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num<span class="number">-1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">move</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;num<span class="number">-1</span>-i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">move</span> = <span class="number">1</span>;</span><br><span class="line">				tmp = arr[j];</span><br><span class="line">				arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">				arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">move</span> == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="排序方法比较"><a href="#排序方法比较" class="headerlink" title="排序方法比较"></a>排序方法比较</h1><p><img src="/img/排序复杂度.png" alt></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>动态库和静态库</title>
    <url>/2019/06/06/%E5%8A%A8%E6%80%81%E5%BA%93%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>linux下有两种库：动态库和静态库。</p>
<p>静态库在编译过程中已经被载入，因此编译出来的可执行程序都比较大。程序运行时不再需要静态库，即程序编译完之后静态库就没用了。</p>
<p>动态库（共享库）在程序运行时载入内存，在编译过程中仅简单的引用，因此可执行文件体积比较小。程序运行需要加载动态库，即程序和动态库必须同时存在。</p>
<h1 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h1><p>静态库是.o文件的集合，使用时可以把.a文件当成多个.o的集合使用。</p>
<p>如果.a依赖于动态库，生成.a时不会把.so动态库集合进来，那么使用者使用.a时需要同时链接其依赖的.so库。在产生.a时要避免依赖过多的动态库。</p>
<p>静态库更新之后使用静态库的程序必须重新编译。</p>
<h1 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h1><p>在编译的时候动态库并没有被编译进目标代码，你的程序执行到相关函数时才去调用动态库，所以程序运行时必须提供相应的库。</p>
<p>动态库更新之后不需要重新编译目标程序。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>动态库</tag>
        <tag>静态库</tag>
        <tag>编译</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>docker搭建greenplum开发环境</title>
    <url>/2019/05/15/%E5%9F%BA%E4%BA%8Edocker%E6%90%AD%E5%BB%BAgreenplum%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>略</p>
<h1 id="给普通用户权限"><a href="#给普通用户权限" class="headerlink" title="给普通用户权限"></a>给普通用户权限</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把普通用户加入docker组，如果docker用户组不存在，新建</span></span><br><span class="line">sudo gppasswd -a yfshi docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h1 id="配置greenplum环境"><a href="#配置greenplum环境" class="headerlink" title="配置greenplum环境"></a>配置greenplum环境</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建自定义网络，以便后续设置静态ip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker network create --subnet 10.0.0.0/24 syf_net</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取centos7最小安装镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull centos</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  创建并后台启动容器，名称为dev，使用自定义的网络syf_net，指定静态ip（比如属于syf_net所指定的子网，如果使用非自定义网络，不可设置静态ip，自动分配）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -dit --privileged --net syf_net --ip 10.0.0.1 -dit --name dev centos /usr/sbin/init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器中打开一个交互终端</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it dev /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装常用工具和开发包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y net-tools <span class="built_in">which</span> openssh-clients openssh-server less zip unzip iproute bzip2 cmake gcc gcc-c++ gdb git libtool lrzsz make man net-tools sysstat vim wget sudo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y apr-devel apr-util-devel bison bzip2-devel c-ares-devel flex java-1.8.0-openjdk java-1.8.0-openjdk-devel json-c-devel krb5-devel libcurl-devel libevent-devel libkadm5 libxml2-devel libxslt-devel libyaml-devel openldap-devel openssl-devel pam-devel perl perl-devel perl-ExtUtils-Embed readline-devel unixODBC-devel zlib-devel</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置系统参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/sysctl.conf &lt;&lt;-EOF</span></span><br><span class="line">kernel.shmmax = 500000000</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.shmall = 4000000000</span><br><span class="line">kernel.sem = 500 1024000 200 4096</span><br><span class="line">kernel.sysrq = 1</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.msgmni = 2048</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line">net.ipv4.conf.all.arp_filter = 1</span><br><span class="line">net.ipv4.ip_local_port_range = 1025 65535</span><br><span class="line">net.core.netdev_max_backlog = 10000</span><br><span class="line">net.core.rmem_max = 2097152</span><br><span class="line">net.core.wmem_max = 2097152</span><br><span class="line">vm.overcommit_memory = 2</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/security/limits.conf &lt;&lt;-EOF</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 131072</span><br><span class="line">* hard nproc 131072</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/ld.so.conf &lt;&lt;-EOF</span></span><br><span class="line">/usr/local/lib</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置ssh自启动</span></span><br><span class="line">systemctl enable sshd</span><br><span class="line">systemctl start sshd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">passwd root</span><br><span class="line">useradd -m gpadmin</span><br><span class="line">passwd gpadmin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出当前终端</span></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把该容器制作为镜像</span></span><br><span class="line">docker commit -a yfshi -m "develop environment for greenplum" dev centos-gpdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  基于新镜像启动容器</span></span><br><span class="line">docker run -dit --privileged --net syf_net --ip 10.0.0.2 -dit --name dev1 centos-gpdb /usr/sbin/init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开终端，可以以ssh方式或docker方式</span></span><br><span class="line">docker exec -it dev1 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">ssh gpadmin@10.0.0.2</span><br></pre></td></tr></table></figure>
<h1 id="备份镜像"><a href="#备份镜像" class="headerlink" title="备份镜像"></a>备份镜像</h1><p>为了防止镜像丢失，可以把镜像导出到文件。之后可以通过该文件导入镜像。</p>
<p>有两种方式，一种是通过save/load镜像方式，一种是通过export/import容器方式。区别是export/import不保留历史记录（docker history IMAGE）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把centos-gpdb镜像导出到文件centos-gpdb.tar</span></span><br><span class="line">docker save -o centos-gpdb.tar centos-gpdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入centos-gpdb.tar</span></span><br><span class="line">docker load -i centos-gpdb.tar</span><br></pre></td></tr></table></figure>
<p>附：docker建立ubuntu桌面版，通过vnc连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name=ubuntu -p 5901:5901 -p 6901:6901 --hostname ubuntu --user $(id -u) --net sys_net --ip 10.0.0.200 -e VNC_PW=yfshi -e VNC_RESOLUTION=1280x800  consol/ubuntu-xfce-vnc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用浏览器访问: x.x.x.x:6901</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用vnc客户端访问：x.x.x.x:5901</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>greenplum</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>/2017/10/22/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>堆积排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足<em>堆性质</em>：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>略</p>
<h1 id="排序效果"><a href="#排序效果" class="headerlink" title="排序效果"></a>排序效果</h1><p><img src="/img/堆排序.gif" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapShiftDown</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[ARR_SIZE];</span><br><span class="line"></span><br><span class="line">	RandInitArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	HeapSortAsc(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		arr[i] = <span class="built_in">random</span>()%<span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=num/<span class="number">2</span><span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">		HeapShiftDown(arr, i, num - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=num<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(&amp;arr[<span class="number">0</span>], &amp;arr[i]);</span><br><span class="line">		HeapShiftDown(arr, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapShiftDown</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dead = start;</span><br><span class="line">	<span class="keyword">int</span> son = dead * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (son &lt;= <span class="built_in">end</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (son + <span class="number">1</span> &lt; <span class="built_in">end</span> &amp;&amp; arr[son] &lt; arr[son+<span class="number">1</span>])</span><br><span class="line">			son += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (arr[dead] &gt; arr[son])</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			swap(&amp;arr[dead], &amp;arr[son]);</span><br><span class="line">			dead = son;</span><br><span class="line">			son = dead * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tmp = *x;</span><br><span class="line">	*x = *y;</span><br><span class="line">	*y = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>大数阶乘</title>
    <url>/2017/10/24/%E5%A4%A7%E6%95%B0%E9%98%B6%E4%B9%98/</url>
    <content><![CDATA[<p>对于比较小的数n，可以通过递归或循环将计算结果保存为整形。但是如果n很大的时候，比如1000，那么n!肯定超出整形数据所能表示的范围。因此必须采用其他方法解决。一般是采用数组模拟。实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STORE_STEP_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_store_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXTENT_STORE(s) &#123; \</span></span><br><span class="line">	s_store_size += STORE_STEP_SIZE; \</span><br><span class="line">	s = <span class="built_in">realloc</span>(s, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * s_store_size); \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DESTROY_STORE(s) &#123; free(s); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * digit:</span></span><br><span class="line"><span class="comment"> * 9x + x/10 &lt;= INT_MAX</span></span><br><span class="line"><span class="comment"> * x = 10INT_MAX/91</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> digit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	<span class="keyword">int</span> cvalue;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">	<span class="keyword">int</span> *store;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (digit &lt; <span class="number">1</span> || digit &gt;= <span class="number">10</span>*((<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>)/<span class="number">91</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"digit(%d) is too smaller or too big\n"</span>, digit);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 1! */</span></span><br><span class="line">	<span class="keyword">if</span> (digit == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	EXTENT_STORE(store);</span><br><span class="line">	<span class="keyword">if</span> (store == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"faile...\n"</span>);</span><br><span class="line">		DESTROY_STORE(store);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	store[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">size</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;=digit; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (cvalue=<span class="number">0</span>, j=<span class="number">1</span>; j&lt;=<span class="built_in">size</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = store[j<span class="number">-1</span>] * i + cvalue;</span><br><span class="line">			store[j<span class="number">-1</span>] = temp % <span class="number">10</span>;</span><br><span class="line">			cvalue = temp / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (cvalue &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">size</span> &gt;= s_store_size)</span><br><span class="line">			&#123;</span><br><span class="line">				EXTENT_STORE(store);</span><br><span class="line">				<span class="keyword">if</span> (store == <span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"fail...\n"</span>);</span><br><span class="line">					DESTROY_STORE(store);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			store[++<span class="built_in">size</span> - <span class="number">1</span>] = cvalue % <span class="number">10</span>;</span><br><span class="line">			cvalue /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="built_in">size</span><span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, store[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* store's size and current size */</span></span><br><span class="line">	<span class="comment">//printf("s_store_size=%d, size=%d\n", s_store_size, size);</span></span><br><span class="line"></span><br><span class="line">	DESTROY_STORE(store);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;digit&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fact(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>大数阶乘</tag>
      </tags>
  </entry>
  <entry>
    <title>希尔排序</title>
    <url>/2017/10/22/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>希尔排序，也称递减增量排序算法，是插入排序的一种高速而稳定的改进版本。</p>
<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<ol>
<li>插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率</li>
<li>插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位</li>
</ol>
<h1 id="排序效果"><a href="#排序效果" class="headerlink" title="排序效果"></a>排序效果</h1><p><img src="/img/希尔排序.gif" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的c语言函数</title>
    <url>/2018/12/06/%E5%B8%B8%E7%94%A8%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把标准错误和标准输出重定位到文件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setLogFile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *logFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Logfilefd = <span class="built_in">open</span>(Logfile, O_WRONLY | O_CREAT | O_APPEND, <span class="number">0644</span>)) == <span class="number">-1</span>) </span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Open logfile %s failed.\n"</span>, Logfile);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">close</span>(<span class="number">2</span>);</span><br><span class="line">    dup2(Logfilefd, <span class="number">1</span>); </span><br><span class="line">    dup2(Logfilefd, <span class="number">2</span>); </span><br><span class="line">    <span class="built_in">close</span>(Logfilefd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG(fmt, ...) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; \</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"%s [LOG]:--"</span>fmt<span class="string">"--%s:%d\n"</span>, \</span><br><span class="line">                GetCurrentTime(), ##__VA_ARGS__, __FILE__, __LINE__); \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELOG(fmt, ...) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; \</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s [ERROR]:--"</span>fmt<span class="string">"--%s:%d\n"</span>, \</span><br><span class="line">                GetCurrentTime(), ##__VA_ARGS__, __FILE__, __LINE__); \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLOG(fmt, ...) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; \</span><br><span class="line">        <span class="keyword">if</span> (EnableDebug) \</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"%s [DEBUG]:--"</span>fmt<span class="string">"--%s:%d\n"</span>, \</span><br><span class="line">                    GetCurrentTime(), ##__VA_ARGS__, __FILE__, __LINE__); \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"># 二进制转十六机制</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="comment">// 把二进制转换成十六进制并以字符串形式写到文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bin2HexFp(fp,src,n) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; \</span><br><span class="line">        <span class="keyword">int</span> _bi; \</span><br><span class="line">        <span class="keyword">for</span> (_bi=<span class="number">0</span>; _bi&lt;n; _bi++) <span class="built_in">fprintf</span>(fp, <span class="string">"%02X"</span>, (src)[_bi]); \</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"\n"</span>); \</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h1 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetNonblock</span><span class="params">(<span class="keyword">int</span> socket)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((flag = fcntl(socket, F_GETFL, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (fcntl(socket, F_SETFL, flag | O_NONBLOCK) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">BlockRead</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> nleft;</span><br><span class="line">    <span class="keyword">ssize_t</span> nread;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *pb;</span><br><span class="line"></span><br><span class="line">    pb = buf;</span><br><span class="line">    nleft = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (nleft &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((nread = <span class="built_in">read</span>(fd, pb, nleft)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>) <span class="comment">/* Peer close the connection */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        nleft -= nread;</span><br><span class="line">        pb += nread;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - nleft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">BlockWrite</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> nleft;</span><br><span class="line">    <span class="keyword">ssize_t</span> nwritten;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *pb;</span><br><span class="line"></span><br><span class="line">    pb = buf;</span><br><span class="line">    nleft = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (nleft &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((nwritten = <span class="built_in">write</span>(fd, pb, nleft)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">                nwritten = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nwritten == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        nleft -= nwritten;</span><br><span class="line">        pb += nwritten;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - nleft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">const char *GetProgname(const char *argv0)</span><br><span class="line">&#123;</span><br><span class="line">    char *p;</span><br><span class="line"></span><br><span class="line">    p = strrchr(argv0, '/');</span><br><span class="line">    if (p == NULL)</span><br><span class="line">        return argv0;</span><br><span class="line">    else</span><br><span class="line">        return p+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char *MakeAbsolutePath(const char *path)</span><br><span class="line">&#123;</span><br><span class="line">    char *new;</span><br><span class="line"></span><br><span class="line">    if (path == NULL)</span><br><span class="line">        return NULL;</span><br><span class="line"></span><br><span class="line">    if (path[0] == '/')</span><br><span class="line">    &#123;</span><br><span class="line">        new = strdup(path);</span><br><span class="line">        if (new == NULL)</span><br><span class="line">            return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        char *buf;</span><br><span class="line">        size_t bufLen;</span><br><span class="line"></span><br><span class="line">        bufLen = 1024;</span><br><span class="line">        for (;;)</span><br><span class="line">        &#123;</span><br><span class="line">            buf = malloc(bufLen);</span><br><span class="line">            if (buf == NULL)</span><br><span class="line">                return NULL;</span><br><span class="line"></span><br><span class="line">            if (getcwd(buf, bufLen))</span><br><span class="line">                break;</span><br><span class="line">            else if (errno == ERANGE)</span><br><span class="line">            &#123;</span><br><span class="line">                free(buf);</span><br><span class="line">                bufLen *= 2;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">          	&#123;</span><br><span class="line">                free(buf);</span><br><span class="line">                return NULL;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">        new = malloc(strlen(buf) + strlen(path) + 2);</span><br><span class="line">        if (new == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            free(buf);</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;   </span><br><span class="line">        sprintf(new, "%s/%s", buf, path);</span><br><span class="line">        free(buf);</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    return new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsAlreadyRunning(const char *path)</span><br><span class="line">&#123;</span><br><span class="line">    int          fd;</span><br><span class="line">    char         buf[16];</span><br><span class="line">    struct flock fl;</span><br><span class="line"></span><br><span class="line">    if ((fd = open(path, O_RDWR | O_CREAT, 0644)) == -1)</span><br><span class="line">        return true;</span><br><span class="line"></span><br><span class="line">    fl.l_type = F_WRLCK;</span><br><span class="line">    fl.l_whence = SEEK_SET;</span><br><span class="line">    fl.l_start = 0;</span><br><span class="line">    fl.l_len = 0;</span><br><span class="line">    fl.l_pid = getpid();</span><br><span class="line">    if (fcntl(fd, F_SETLK, &amp;fl) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ftruncate(fd, 0);</span><br><span class="line">    snprintf(buf, 16, "%ld", (long)getpid());</span><br><span class="line">    write(fd, buf, strlen(buf)+1);</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateString</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *dest, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> allChar[] = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    <span class="keyword">int</span> cLen = <span class="built_in">strlen</span>(allChar);</span><br><span class="line"></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *dest = allChar[rand() % cLen];</span><br><span class="line">        dest++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">GetCurrentTime</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> _CurrentTime[<span class="number">27</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(_CurrentTime, <span class="number">27</span>, <span class="string">"unknown time"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (gettimeofday(&amp;tv, <span class="literal">NULL</span>) == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> _CurrentTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((tp = localtime(&amp;tv.tv_sec)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> _CurrentTime;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(_CurrentTime, <span class="number">27</span>, <span class="string">"%04d-%02d-%02d %02d:%02d:%02d.%06ld"</span>,</span><br><span class="line">            tp-&gt;tm_year+<span class="number">1900</span>, tp-&gt;tm_mon+<span class="number">1</span>, tp-&gt;tm_mday,</span><br><span class="line">            tp-&gt;tm_hour, tp-&gt;tm_min, tp-&gt;tm_sec, tv.tv_usec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _CurrentTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数字判断"><a href="#数字判断" class="headerlink" title="数字判断"></a>数字判断</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsDigitals</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span> || *s == <span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*p == <span class="string">'-'</span>)</span><br><span class="line">        p++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; *p!=<span class="string">'\0'</span>; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p &lt; <span class="string">'0'</span> || *p &gt; <span class="string">'9'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsNonnegativeInteger</span><span class="params">(<span class="keyword">char</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span> || data[<span class="number">0</span>] == <span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    p = data;</span><br><span class="line">    <span class="keyword">for</span> (p=data; *p!=<span class="string">'\0'</span>; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p&lt;<span class="string">'0'</span> || *p&gt;<span class="string">'9'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="mac地址"><a href="#mac地址" class="headerlink" title="mac地址"></a>mac地址</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据socket获取mac地址</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetLocalMac</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> delimiter, <span class="keyword">char</span> *mac, <span class="keyword">size_t</span> macLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span> *<span class="title">ifaddr</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span> *<span class="title">ifp</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span>    <span class="title">ifr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">inp</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *ifname;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">in</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> inLen;</span><br><span class="line"></span><br><span class="line">    inLen = <span class="keyword">sizeof</span>(in);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;in, <span class="number">0</span>, inLen);</span><br><span class="line">    <span class="keyword">if</span> (getsockname(fd, (struct sockaddr*)&amp;in, &amp;inLen) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getifaddrs(&amp;ifaddr) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ifp=ifaddr; ifp!=<span class="literal">NULL</span>; ifp=ifp-&gt;ifa_next)</span><br><span class="line">    &#123;   </span><br><span class="line">        inp = (struct sockaddr_in*)ifp-&gt;ifa_addr;</span><br><span class="line">        <span class="keyword">if</span> (inp != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">                inp-&gt;sin_family == in.sin_family &amp;&amp;</span><br><span class="line">                inp-&gt;sin_addr.s_addr == in.sin_addr.s_addr)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ifp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;   </span><br><span class="line">        freeifaddrs(ifaddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ifname = ifp-&gt;ifa_name;</span><br><span class="line">  	<span class="built_in">strncpy</span>(ifr.ifr_name, ifname, IFNAMSIZ);</span><br><span class="line">    <span class="keyword">if</span> (ioctl(fd, SIOCGIFHWADDR, &amp;ifr) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        freeifaddrs(ifaddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    freeifaddrs(ifaddr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(mac, macLen, <span class="string">"%02X%c%02X%c%02X%c%02X%c%02X%c%02X"</span>,</span><br><span class="line">            (<span class="keyword">unsigned</span> <span class="keyword">char</span>)ifr.ifr_hwaddr.sa_data[<span class="number">0</span>], delimiter,</span><br><span class="line">            (<span class="keyword">unsigned</span> <span class="keyword">char</span>)ifr.ifr_hwaddr.sa_data[<span class="number">1</span>], delimiter,</span><br><span class="line">            (<span class="keyword">unsigned</span> <span class="keyword">char</span>)ifr.ifr_hwaddr.sa_data[<span class="number">2</span>], delimiter,</span><br><span class="line">            (<span class="keyword">unsigned</span> <span class="keyword">char</span>)ifr.ifr_hwaddr.sa_data[<span class="number">3</span>], delimiter,</span><br><span class="line">            (<span class="keyword">unsigned</span> <span class="keyword">char</span>)ifr.ifr_hwaddr.sa_data[<span class="number">4</span>], delimiter,</span><br><span class="line">            (<span class="keyword">unsigned</span> <span class="keyword">char</span>)ifr.ifr_hwaddr.sa_data[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据socket获取对端mac地址</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetPeerMac</span><span class="params">(<span class="keyword">int</span> fd, struct sockaddr *from,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">socklen_t</span> fromLen, <span class="keyword">char</span> delimiter, <span class="keyword">char</span> *mac, <span class="keyword">size_t</span> macLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span> *<span class="title">ifaddr</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ifaddrs</span> *<span class="title">ifp</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">inp</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *ifname;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">in</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> inLen;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arpreq</span> <span class="title">arp</span>;</span></span><br><span class="line"></span><br><span class="line">    inLen = <span class="keyword">sizeof</span>(in);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;in, <span class="number">0</span>, inLen);</span><br><span class="line">    <span class="keyword">if</span> (getsockname(fd, (struct sockaddr*)&amp;in, &amp;inLen) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getifaddrs(&amp;ifaddr) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ifp=ifaddr; ifp!=<span class="literal">NULL</span>; ifp=ifp-&gt;ifa_next)</span><br><span class="line">    &#123;</span><br><span class="line">        inp = (struct sockaddr_in*)ifp-&gt;ifa_addr;</span><br><span class="line">        <span class="keyword">if</span> (inp != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">                inp-&gt;sin_family == in.sin_family &amp;&amp;</span><br><span class="line">                inp-&gt;sin_addr.s_addr == in.sin_addr.s_addr)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ifp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        freeifaddrs(ifaddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ifname = ifp-&gt;ifa_name;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;arp, <span class="number">0</span>, <span class="keyword">sizeof</span>(arp));</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;arp.arp_pa, from, fromLen);</span><br><span class="line">  	<span class="built_in">strncpy</span>(arp.arp_dev, ifname, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (ioctl(fd, SIOCGARP, &amp;arp) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        freeifaddrs(ifaddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    freeifaddrs(ifaddr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(mac, macLen, <span class="string">"%02X%c%02X%c%02X%c%02X%c%02X%c%02X"</span>,</span><br><span class="line">            arp.arp_ha.sa_data[<span class="number">0</span>], delimiter,</span><br><span class="line">            arp.arp_ha.sa_data[<span class="number">1</span>], delimiter,</span><br><span class="line">            arp.arp_ha.sa_data[<span class="number">2</span>], delimiter,</span><br><span class="line">            arp.arp_ha.sa_data[<span class="number">3</span>], delimiter,</span><br><span class="line">            arp.arp_ha.sa_data[<span class="number">4</span>], delimiter,</span><br><span class="line">            arp.arp_ha.sa_data[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;getopt.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;signal.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;string.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;errno.h&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;time.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ifndef bool</span></span><br><span class="line">typedef unsigned char bool;</span><br><span class="line"><span class="meta">#</span><span class="bash">define <span class="literal">true</span> 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define <span class="literal">false</span> 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">endif</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">define _(x) (x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">define ELOG(fmt, args...) \</span></span><br><span class="line">    do &#123; \</span><br><span class="line">        fprintf(stderr, "[ERROR]:--"fmt"--%s:%d\n", \</span><br><span class="line">                ##args, __FILE__, __LINE__); \</span><br><span class="line">    &#125; while (0)</span><br><span class="line"></span><br><span class="line">static const char *Progname;</span><br><span class="line">static const char *SubProgram = NULL;</span><br><span class="line">static char       *Opts;</span><br><span class="line">static void       (*Func)(void);</span><br><span class="line"></span><br><span class="line">static int    ProductionLimit = -1;</span><br><span class="line">static int    ConnectionLimit = -1;</span><br><span class="line">static time_t Deadline = 0xFFFFFFFF;</span><br><span class="line">static char  *UpdateFile = "./update.bin";</span><br><span class="line">static char  *Hid = NULL;</span><br><span class="line">static char  *Logo = "";</span><br><span class="line">static char  *Protocol = "CCID";</span><br><span class="line">static bool   SetNetwork = false;</span><br><span class="line">static bool   SetLogo = false;</span><br><span class="line">static bool   SetDeadline = false;</span><br><span class="line">static bool   SetUnlock = false;</span><br><span class="line">static bool   SetMotherMode = false;</span><br><span class="line">static bool   IsEmpty = false;</span><br><span class="line">static bool   EnableVerbose = false;</span><br><span class="line">static bool   EnableDebug = false;</span><br><span class="line"></span><br><span class="line">static void Usage(void);</span><br><span class="line">static void FormLogo(char *logo);</span><br><span class="line">static bool StrToTime(const char *str, time_t *t);</span><br><span class="line">static bool IsDigitals(const char *str);</span><br><span class="line">const char *GetProgname(const char *argv0);</span><br><span class="line"></span><br><span class="line">static void MCInit(void);</span><br><span class="line">static void Init(void);</span><br><span class="line">static void MakeUpdate(void);</span><br><span class="line">static void Update(void);</span><br><span class="line">static void Reset(void);</span><br><span class="line">static void List(void);</span><br><span class="line">static void SwitchProtocol(void);</span><br><span class="line"></span><br><span class="line">static struct ExecStringOpts</span><br><span class="line">&#123;</span><br><span class="line">    char    *string;</span><br><span class="line">    char    *opts;</span><br><span class="line">    void    (*func)(void);</span><br><span class="line">&#125; ExecStringOpts[] =</span><br><span class="line">&#123;</span><br><span class="line">    &#123;"mcinit", "H:F:P:", MCInit&#125;,</span><br><span class="line">    &#123;"init", "D:H:L:M:N:P:", Init&#125;,</span><br><span class="line">    &#123;"makeupdate", "D:F:H:L:N:U1", MakeUpdate&#125;,</span><br><span class="line">    &#123;"update", "H:F:", Update&#125;,</span><br><span class="line">    &#123;"reset", "H:", Reset&#125;,</span><br><span class="line">    &#123;"list", "H:v", List&#125;,</span><br><span class="line">    &#123;"switch", "H:P:", SwitchProtocol&#125;,</span><br><span class="line">    &#123;NULL, NULL, NULL&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    static struct option long_options[] = &#123;</span><br><span class="line">        &#123;"debug", no_argument, NULL, 'd'&#125;,    /* enable debug */</span><br><span class="line">        &#123;"empty", no_argument, NULL, '1'&#125;,    /* is empty dongle */</span><br><span class="line">        &#123;"local", no_argument, NULL, '2'&#125;,    /* is empty dongle */</span><br><span class="line">        &#123;NULL, required_argument, NULL, 'D'&#125;, /* deadline */</span><br><span class="line">        &#123;NULL, required_argument, NULL, 'F'&#125;, /* update file path */</span><br><span class="line">        &#123;NULL, required_argument, NULL, 'H'&#125;, /* hid */</span><br><span class="line">        &#123;NULL, required_argument, NULL, 'L'&#125;, /* logo */</span><br><span class="line">        &#123;NULL, required_argument, NULL, 'M'&#125;, /* init a mother dongle? default child dongle */</span><br><span class="line">        &#123;NULL, required_argument, NULL, 'N'&#125;, /* network client number */</span><br><span class="line">        &#123;NULL, required_argument, NULL, 'P'&#125;, /* admin pin */</span><br><span class="line">        &#123;NULL , no_argument, NULL, 'U'&#125;,      /* unlock user pin */</span><br><span class="line">        &#123;NULL , no_argument, NULL, 'v'&#125;,      /* list dongle verbose information */</span><br><span class="line">        &#123;NULL, 0, NULL, 0&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    int c, option_index;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    Progname = GetProgname(argv[0]);</span><br><span class="line"></span><br><span class="line">    Opts = ExecStringOpts[i].opts;</span><br><span class="line">    Func = MCInit;</span><br><span class="line">    </span><br><span class="line">    if (argc &gt; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        for (i=0; ExecStringOpts[i].string!=NULL; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (strcasecmp(argv[1], ExecStringOpts[i].string) == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                SubProgram = ExecStringOpts[i].string;</span><br><span class="line">                Opts = ExecStringOpts[i].opts;</span><br><span class="line">                Func = ExecStringOpts[i].func;</span><br><span class="line">                argc--;</span><br><span class="line">                argv++;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (argc &gt; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        if (strcmp(argv[1], "--help") == 0 || strcmp(argv[1], "-?") == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            Usage();</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">        if (strcmp(argv[1], "--version") == 0 || strcmp(argv[1], "-V") == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    while ((c = getopt_long(argc, argv, Opts, long_options, &amp;option_index)) != -1)</span><br><span class="line">    &#123;</span><br><span class="line">        switch (c)</span><br><span class="line">        &#123;</span><br><span class="line">            case 'D':</span><br><span class="line">                SetDeadline = true;</span><br><span class="line">                if (!StrToTime(optarg, &amp;Deadline))</span><br><span class="line">                &#123;</span><br><span class="line">                    ELOG("Time format error");</span><br><span class="line">                    return 1;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case 'd':</span><br><span class="line">                EnableDebug = true;</span><br><span class="line">                break;</span><br><span class="line">            case 'F':</span><br><span class="line">                UpdateFile = optarg;</span><br><span class="line">                break;</span><br><span class="line">            case 'H':</span><br><span class="line">                Hid = optarg;</span><br><span class="line">                break;</span><br><span class="line">            case 'L':</span><br><span class="line">                SetLogo = true;</span><br><span class="line">                Logo = optarg;</span><br><span class="line">                FormLogo(Logo);</span><br><span class="line">                break;</span><br><span class="line">            case 'M':</span><br><span class="line">                SetMotherMode = true;</span><br><span class="line">                if (!IsDigitals(optarg))</span><br><span class="line">                &#123;</span><br><span class="line">                    ELOG("Option format error");</span><br><span class="line">                    return 1;</span><br><span class="line">                &#125;</span><br><span class="line">                ProductionLimit = atoi(optarg);</span><br><span class="line">                break;</span><br><span class="line">            case 'N':</span><br><span class="line">            	SetNetwork = true;</span><br><span class="line">                if (!IsDigitals(optarg))</span><br><span class="line">                &#123;</span><br><span class="line">                    ELOG("Option format error");</span><br><span class="line">                    return 1;</span><br><span class="line">                &#125;</span><br><span class="line">                ConnectionLimit = atoi(optarg);</span><br><span class="line">                break;</span><br><span class="line">            case 'P':</span><br><span class="line">                Protocol = optarg;</span><br><span class="line">                break;</span><br><span class="line">            case 'U':</span><br><span class="line">                SetUnlock = true;</span><br><span class="line">                break;</span><br><span class="line">            case 'v':</span><br><span class="line">                EnableVerbose = true;</span><br><span class="line">                break;</span><br><span class="line">            case '1':</span><br><span class="line">                IsEmpty = true;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                if (SubProgram != NULL)</span><br><span class="line">                    fprintf(stderr, "Try \"%s %s --help\" for more information.\n",</span><br><span class="line">                            Progname, SubProgram);</span><br><span class="line">                else</span><br><span class="line">                    fprintf(stderr, "Try \"%s --help\" for more information.\n",</span><br><span class="line">                            Progname);</span><br><span class="line">                return 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (optind &lt; argc)</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(stderr, "Invalid argument: \"%s\".\n", argv[optind]);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Func();</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Usage(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(_("%s is a super dongle tool.\n\n"), Progname);</span><br><span class="line">    printf(_("Usage:\n"));</span><br><span class="line">    if (SubProgram == NULL || *SubProgram == '\0')</span><br><span class="line">    &#123;</span><br><span class="line">        printf(_("  %s [mcinit] [OPTION]\n"), Progname);</span><br><span class="line">        printf(_("  %s init [OPTION]\n"), Progname);</span><br><span class="line">        printf(_("  %s mamkeupdate [OPTION]\n"), Progname);</span><br><span class="line">        printf(_("  %s update [OPTION]\n"), Progname);</span><br><span class="line">        printf(_("  %s reset [OPTION]\n"), Progname);</span><br><span class="line">        printf(_("  %s list [OPTION]\n"), Progname);</span><br><span class="line">        printf(_("  %s switch [OPTION]\n"), Progname);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        printf(_("  %s %s [OPTION]\n"), Progname, SubProgram);</span><br><span class="line">    printf(_("\nOptions:\n"));</span><br><span class="line">    if (strchr(Opts, 'D') != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(_("  -D DEADLINE          set expiration time\n"));</span><br><span class="line">        printf(_("                       \"unlimited\"\n"));</span><br><span class="line">        printf(_("                       \"yyyy-mm-dd hh:mm:ss\" (1977-06-23 23:00:00 ~ 2038-01-19 11:14:07)\n"));</span><br><span class="line">        printf(_("                       \"hours\" (1 ~ 65535)\n"));</span><br><span class="line">    &#125;</span><br><span class="line">    if (strchr(Opts, 'F') != NULL)</span><br><span class="line">        printf(_("  -F FILE              update file path (default %s)\n"), UpdateFile);</span><br><span class="line">    if (strchr(Opts, 'H') != NULL)</span><br><span class="line">        printf(_("  -H HID               dongle hid\n"));</span><br><span class="line">    if (strchr(Opts, 'L') != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(_("  -L LOGO              logo separated by \";\"\n"));</span><br><span class="line">        printf(_("                       \"CustomerName: xxx;ProjectCode: 0x123;ProjectName: yyy\"\n"));</span><br><span class="line">    &#125;</span><br><span class="line">    if (strchr(Opts, 'M') != NULL)</span><br><span class="line">        printf(_("  -M NUM               initialize a mother dongle\n"));</span><br><span class="line">    if (strchr(Opts, 'N') != NULL)</span><br><span class="line">    	printf(_("  -N NUM               set to network mode, and set connection limit"</span><br><span class="line">                    "(default local mode)\n"));</span><br><span class="line">    if (strchr(Opts, 'P') != NULL)</span><br><span class="line">        printf(_("  -P PROTOCOL          communication protocol, default CCID\n"));</span><br><span class="line">    if (strchr(Opts, 'U') != NULL)</span><br><span class="line">        printf(_("  -U                   unlock user pin\n"));</span><br><span class="line">    if (strchr(Opts, 'v') != NULL)</span><br><span class="line">        printf(_("  -v                   view details\n"));</span><br><span class="line">    if (strchr(Opts, '1') != NULL)</span><br><span class="line">        printf(_("  --empty              empty dongle\n"), UpdateFile);</span><br><span class="line">    printf(_("  -?,--help            show help\n"));</span><br><span class="line">&#125;</span><br><span class="line">static void FormLogo(char *logo)</span><br><span class="line">&#123;&#125;</span><br><span class="line">static bool StrToTime(const char *str, time_t *t)</span><br><span class="line">&#123;</span><br><span class="line">    struct tm tm; </span><br><span class="line"></span><br><span class="line">    if (strcasecmp(str, "unlimited") == 0) /* unlimited */</span><br><span class="line">    &#123;   </span><br><span class="line">        *t = 0xFFFFFFFF;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    if (sscanf(str, "%d-%d-%d %d:%d:%d",</span><br><span class="line">                &amp;tm.tm_year, &amp;tm.tm_mon, &amp;tm.tm_mday,</span><br><span class="line">                &amp;tm.tm_hour, &amp;tm.tm_min, &amp;tm.tm_sec) == 6) /* xxxx-xx-xx xx:xx:xx */</span><br><span class="line">    &#123;   </span><br><span class="line">        if (tm.tm_year &lt; 1977 || tm.tm_year &gt; 2038 ||</span><br><span class="line">                tm.tm_mon &lt; 1 || tm.tm_mon &gt; 12 ||</span><br><span class="line">                tm.tm_mday &lt; 1 || tm.tm_mday &gt; 31 ||</span><br><span class="line">                tm.tm_hour &gt; 24 || tm.tm_min &gt; 60 || tm.tm_sec &gt; 60) </span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        if (tm.tm_year == 1977 &amp;&amp;</span><br><span class="line">                (tm.tm_mon &lt; 6 ||</span><br><span class="line">                 (tm.tm_mon == 6 &amp;&amp;</span><br><span class="line">                  (tm.tm_mday &lt; 23 ||</span><br><span class="line">                   (tm.tm_mday == 23 &amp;&amp;</span><br><span class="line">                    (tm.tm_hour &lt; 23))))))</span><br><span class="line">                return false;</span><br><span class="line"></span><br><span class="line">        if (tm.tm_year == 2038 &amp;&amp;</span><br><span class="line">                (tm.tm_mon &gt; 1 ||</span><br><span class="line">                 (tm.tm_mon == 1 &amp;&amp;</span><br><span class="line">                  (tm.tm_mday &gt; 19 ||</span><br><span class="line">                   (tm.tm_mday == 19 &amp;&amp;</span><br><span class="line">                    (tm.tm_hour &gt; 11 ||</span><br><span class="line">                     (tm.tm_hour == 11 &amp;&amp;</span><br><span class="line">                      (tm.tm_min &gt; 14 ||</span><br><span class="line">                       (tm.tm_min == 14 &amp;&amp;</span><br><span class="line">                        (tm.tm_sec &gt; 7))))))))))</span><br><span class="line">                return false;</span><br><span class="line"></span><br><span class="line">        tm.tm_year -= 1900;</span><br><span class="line">        tm.tm_mon--;</span><br><span class="line">        tm.tm_isdst = -1;</span><br><span class="line">        if ((*t = mktime(&amp;tm)) == -1)</span><br><span class="line">            return false;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* xxx hours */</span><br><span class="line">    if (!IsDigitals(str))</span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line">    *t = atoi(str);</span><br><span class="line">    if (*t &lt; 1 || *t &gt; 0xFFFF)</span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">static bool IsDigitals(const char *str)</span><br><span class="line">&#123;</span><br><span class="line">  	return true;</span><br><span class="line">&#125;</span><br><span class="line">const char *GetProgname(const char *argv0)</span><br><span class="line">&#123;</span><br><span class="line">    char *p;</span><br><span class="line"></span><br><span class="line">    p = strrchr(argv0, '/');</span><br><span class="line">    if (p == NULL)</span><br><span class="line">        return argv0;</span><br><span class="line">    else</span><br><span class="line">        return p+1;</span><br><span class="line">&#125;</span><br><span class="line">static void MCInit(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">static void Init(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">static void MakeUpdate(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">static void Update(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">static void Reset(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">static void List(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">static void SwitchProtocol(void)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2017/10/22/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针达到序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>
<h1 id="排序效果"><a href="#排序效果" class="headerlink" title="排序效果"></a>排序效果</h1><p><img src="/img/归并排序.gif" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2017/10/22/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 <em>n</em> 个项目要<strong>Ο</strong>(<em>n</em> log <em>n</em>)次比较。在最坏状况下则需要<strong>Ο</strong>(<em>n</em>2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他<strong>Ο</strong>(<em>n</em> log <em>n</em>) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来，且在大部分真实世界的数据，可以决定设计的选择，减少所需时间的二次方项之可能性。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot），</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为<strong>分区（partition）</strong>操作。</li>
<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<h1 id="排序效果"><a href="#排序效果" class="headerlink" title="排序效果"></a>排序效果</h1><p><img src="/img/快速排序.gif" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[ARR_SIZE];</span><br><span class="line"></span><br><span class="line">	RandInitArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	QuickSortAsc(arr, <span class="number">0</span>, ARR_SIZE<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		arr[i] = <span class="built_in">random</span>()%<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> low, high;</span><br><span class="line">	<span class="keyword">int</span> pivot;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (left &lt; right)</span><br><span class="line">	&#123;</span><br><span class="line">		low = left;</span><br><span class="line">		high = right;</span><br><span class="line">		pivot = arr[low];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (low &lt; high &amp;&amp; pivot &lt;= arr[high])</span><br><span class="line">				high--;</span><br><span class="line">			arr[low] = arr[high];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (low &lt; high &amp;&amp; pivot &gt; arr[low])</span><br><span class="line">				low++;</span><br><span class="line">			arr[high] = arr[low];</span><br><span class="line">		&#125;</span><br><span class="line">		arr[low] = pivot;</span><br><span class="line"></span><br><span class="line">		QuickSortAsc(arr, left, low<span class="number">-1</span>);</span><br><span class="line">		QuickSortAsc(arr, low+<span class="number">1</span>, right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>centos/redhat搭建yum源</title>
    <url>/2017/09/25/%E6%90%AD%E5%BB%BAyum%E6%BA%90/</url>
    <content><![CDATA[<h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><ol>
<li><p>把所有的光盘或iso文件（ios可能有两个或多个）中的rpm包拷贝出来</p>
</li>
<li><p>使用createrepo创建仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /opt/yum/centos6.7/Packages</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mount /dev/cdrom /mnt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> createrepo -v -g /mnt/repodata/*-comps.xml /opt/yum/centos6.7</span></span><br></pre></td></tr></table></figure>
<p>createrepo的-g的作用是加载分组信息<code>yum grouplist</code>，可以用下面两条命令实现同样的功能：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> createrepo -v /opt/yum/centos6.7</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /mnt/repodata/*-comps.xml* /opt/yum/centos6.7/repodata/</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><ol>
<li><p>启动httpd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service httpd start</span><br></pre></td></tr></table></figure>
</li>
<li><p>把仓库放到http工作目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /opt/yum/centos6.7 /var/www/html</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="设置repo文件"><a href="#设置repo文件" class="headerlink" title="设置repo文件"></a>设置repo文件</h1><p>新建repo文件<code>touch /etc/yum.repo/local.repo</code>，或者直接在原有的repo文件中添加，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[http_server]</span><br><span class="line">name=This is a http repo</span><br><span class="line">baseurl=http://localhost/home/yum/centos6.7</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>
<p>可以把原来的Centos-Base.repo中的源都加上<code>enable=0</code>禁用，否则会先去找这个文件中的路径</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum list</span><br><span class="line">yum install xxx.rpm</span><br><span class="line">yum install -y xxx.rpm</span><br><span class="line">yum uninstall xxx</span><br><span class="line">yum grouplist</span><br><span class="line">yum groupinstall xxx</span><br><span class="line">yum groupinstall -y xxx</span><br><span class="line">yum ungroup xxx</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="升级python导致yum不可用"><a href="#升级python导致yum不可用" class="headerlink" title="升级python导致yum不可用"></a>升级python导致yum不可用</h2><p><code>/usr/bin/yum</code>第一行指定该脚本所使用的python版本，一般是<code>#!/usr/bin/python</code>，python升级之后<code>/usr/bin/python</code>是升级之后的python，和<code>/usr/bin/yum</code>不兼容。</p>
<p>可以修改<code>/usr/bin/yum</code>第一行为原来的python版本，比如<code>#!/usr/bin/python2.6</code></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2017/10/22/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>插入排序（Insertion Sort）的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置中</li>
<li>重复步骤2</li>
</ol>
<h1 id="排序效果"><a href="#排序效果" class="headerlink" title="排序效果"></a>排序效果</h1><p><img src="/img/插入排序.gif" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>查看linux信息</title>
    <url>/2018/09/15/%E6%9F%A5%E7%9C%8Blinux%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h1><h2 id="内核和架构"><a href="#内核和架构" class="headerlink" title="内核和架构"></a>内核和架构</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="comment"># uname --help</span></span></span><br><span class="line">  -a, --all                print all information, in the following order,</span><br><span class="line">                             except omit -p and -i if unknown:</span><br><span class="line">  -s, --kernel-name        print the kernel name</span><br><span class="line">  -n, --nodename           print the network node hostname</span><br><span class="line">  -r, --kernel-release     print the kernel release</span><br><span class="line">  -v, --kernel-version     print the kernel version</span><br><span class="line">  -m, --machine            print the machine hardware name</span><br><span class="line">  -p, --processor          print the processor type or "unknown"</span><br><span class="line">  -i, --hardware-platform  print the hardware platform or "unknown"</span><br><span class="line">  -o, --operating-system   print the operating system</span><br><span class="line">      --help     display this help and exit</span><br><span class="line">      --version  output version information and exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uname -a</span></span><br><span class="line">Linux h113 2.6.32-696.10.1.el6.x86_64 #1 SMP Tue Aug 22 18:51:35 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以“|”分割的所有信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"`uname -s` | `uname -n` | `uname -r` | `uname -v` | `uname -m` | `uname -p` | `uname -i` | `uname -o`"</span></span></span><br><span class="line">Linux | h113 | 2.6.32-696.10.1.el6.x86_64 | #1 SMP Tue Aug 22 18:51:35 UTC 2017 | x86_64 | x86_64 | x86_64 | GNU/Linux</span><br></pre></td></tr></table></figure>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/issue</span></span><br><span class="line">CentOS release 6.4 (Final)</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure>
<h2 id="语言和字符集"><a href="#语言和字符集" class="headerlink" title="语言和字符集"></a>语言和字符集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$LANG</span> </span></span><br><span class="line">en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> locale</span></span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">LC_CTYPE="en_US.UTF-8"</span><br><span class="line">LC_NUMERIC="en_US.UTF-8"</span><br><span class="line">LC_TIME="en_US.UTF-8"</span><br><span class="line">LC_COLLATE="en_US.UTF-8"</span><br><span class="line">LC_MONETARY="en_US.UTF-8"</span><br><span class="line">LC_MESSAGES="en_US.UTF-8"</span><br><span class="line">LC_PAPER="en_US.UTF-8"</span><br><span class="line">LC_NAME="en_US.UTF-8"</span><br><span class="line">LC_ADDRESS="en_US.UTF-8"</span><br><span class="line">LC_TELEPHONE="en_US.UTF-8"</span><br><span class="line">LC_MEASUREMENT="en_US.UTF-8"</span><br><span class="line">LC_IDENTIFICATION="en_US.UTF-8"</span><br><span class="line">LC_ALL=</span><br></pre></td></tr></table></figure>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示系统所有进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps -ef</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以树形显示所有进程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps -ef f</span></span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uptime          <span class="comment">#查看服务器开机时长，用户数，平均负载</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lsmod           <span class="comment">#查看所有加载的模块</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> env             <span class="comment">#查系统环境变量</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> crontab -l      <span class="comment">#查看计划任务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> top             <span class="comment">#查看系统任务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iostat          <span class="comment">#查看系统io</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vmstate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat         <span class="comment">#查看网络、路由、端口占用等</span></span></span><br></pre></td></tr></table></figure>
<h1 id="硬件信息"><a href="#硬件信息" class="headerlink" title="硬件信息"></a>硬件信息</h1><h2 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/cpu</span></span><br><span class="line">processor	: 0</span><br><span class="line">vendor_id	: GenuineIntel</span><br><span class="line">cpu family	: 6</span><br><span class="line">model		: 85</span><br><span class="line">model name	: Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz</span><br><span class="line">stepping	: 4</span><br><span class="line">microcode	: 0x2000026</span><br><span class="line">cpu MHz		: 999.960</span><br><span class="line">cache size	: 25344 KB</span><br><span class="line">physical id	: 0</span><br><span class="line">siblings	: 36</span><br><span class="line">core id		: 0</span><br><span class="line">cpu cores	: 18</span><br><span class="line">apicid		: 0</span><br><span class="line">initial apicid	: 0</span><br><span class="line">fpu		: yes</span><br><span class="line">fpu_exception	: yes</span><br><span class="line">cpuid level	: 22</span><br><span class="line">wp		: yes</span><br><span class="line">flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb </span><br><span class="line">rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 </span><br><span class="line">ssse3 fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 </span><br><span class="line">intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm mpx rdt_a avx512f avx512dq rdseed adx smap cl</span><br><span class="line">flushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts hwp hwp_act_window</span><br><span class="line"> hwp_epp hwp_pkg_req</span><br><span class="line">bogomips	: 4600.00</span><br><span class="line">clflush size	: 64</span><br><span class="line">cache_alignment	: 64</span><br><span class="line">address sizes	: 46 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">省略</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">processor	: 71             # 逻辑核编号：共72个逻辑cpu</span><br><span class="line">vendor_id	: GenuineIntel   # 制造商</span><br><span class="line">cpu family	: 6              # 产品系列</span><br><span class="line">model		: 85             # 属于其系列的哪一代</span><br><span class="line">model name	: Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz</span><br><span class="line">stepping	: 4</span><br><span class="line">microcode	: 0x2000026</span><br><span class="line">cpu MHz		: 1131.222       # 主频</span><br><span class="line">cache size	: 25344 KB       # 二级缓存大小</span><br><span class="line">physical id	: 1              # 单个cpu标号：共2个cpu</span><br><span class="line">siblings	: 36             # 当前cpu的逻辑核数</span><br><span class="line">core id		: 27             # 当前物理核在其所处cpu中的唯一编号，不一定连续</span><br><span class="line">cpu cores	: 18             # 当前cpu的物理核数，siblings/cpu cores就是超线程数</span><br><span class="line">apicid		: 119</span><br><span class="line">initial apicid	: 119</span><br><span class="line">fpu		: yes</span><br><span class="line">fpu_exception	: yes</span><br><span class="line">cpuid level	: 22</span><br><span class="line">wp		: yes</span><br><span class="line">flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm mpx rdt_a avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts hwp hwp_act_window hwp_epp hwp_pkg_req</span><br><span class="line">bogomips	: 4605.53</span><br><span class="line">clflush size	: 64</span><br><span class="line">cache_alignment	: 64</span><br><span class="line">address sizes	: 46 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/meminfo </span></span><br><span class="line">MemTotal:       196521604 kB   # 总内存</span><br><span class="line">MemFree:          644068 kB    # 空闲内存</span><br><span class="line">MemAvailable:   192606708 kB   # 可用内存</span><br><span class="line">Buffers:             152 kB</span><br><span class="line">Cached:         186042324 kB</span><br><span class="line">SwapCached:            0 kB</span><br><span class="line">Active:           643680 kB</span><br><span class="line">Inactive:       185668932 kB</span><br><span class="line">Active(anon):     203332 kB</span><br><span class="line">Inactive(anon):   329264 kB</span><br><span class="line">Active(file):     440348 kB</span><br><span class="line">Inactive(file): 185339668 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       4194300 kB    # 交换空间大小</span><br><span class="line">SwapFree:        4194300 kB    # 空闲交换空间</span><br><span class="line">Dirty:                40 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        270064 kB</span><br><span class="line">Mapped:           330936 kB</span><br><span class="line">Shmem:            262460 kB</span><br><span class="line">Slab:            7182928 kB</span><br><span class="line">SReclaimable:    6933600 kB</span><br><span class="line">SUnreclaim:       249328 kB</span><br><span class="line">KernelStack:       20704 kB</span><br><span class="line">PageTables:        17124 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:    190889820 kB</span><br><span class="line">Committed_AS:    1997032 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:      833948 kB</span><br><span class="line">VmallocChunk:   34258257916 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:     69632 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:      374132 kB</span><br><span class="line">DirectMap2M:     8749056 kB</span><br><span class="line">DirectMap1G:    192937984 kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有交换空间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> swapon -s</span></span><br><span class="line">Filename				Type		Size	Used	Priority</span><br><span class="line">/dev/dm-1                               partition	16506876	240	-1</span><br></pre></td></tr></table></figure>
<h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 树状显示所有块设备，比较直观</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lsblk </span></span><br><span class="line">NAME                      MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda                         8:0    0   512G  0 disk </span><br><span class="line">├─sda1                      8:1    0   500M  0 part /boot</span><br><span class="line">└─sda2                      8:2    0 511.5G  0 part </span><br><span class="line">  ├─vg_h95-lv_root (dm-0) 253:0    0    50G  0 lvm  /</span><br><span class="line">  ├─vg_h95-lv_swap (dm-1) 253:1    0  15.8G  0 lvm  [SWAP]</span><br><span class="line">  └─vg_h95-lv_home (dm-2) 253:2    0   2.1T  0 lvm  /home</span><br><span class="line">sdb                         8:16   0   1.7T  0 disk </span><br><span class="line">└─sdb1                      8:17   0   1.7T  0 part </span><br><span class="line">  └─vg_h95-lv_home (dm-2) 253:2    0   2.1T  0 lvm  /home</span><br><span class="line">sr0                        11:0    1  1024M  0 rom</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> fdisk是分区工具，可显示磁盘详细信息，不直观</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> fdisk -l</span></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 549.8 GB, 549755813888 bytes</span><br><span class="line">255 heads, 63 sectors/track, 66837 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x000cde3e</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *           1          64      512000   83  Linux</span><br><span class="line">Partition 1 does not end on cylinder boundary.</span><br><span class="line">/dev/sda2              64       66838   536357888   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">WARNING: GPT (GUID Partition Table) detected on '/dev/sdb'! The util fdisk doesn't support GPT. Use GNU Parted.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 1842.2 GB, 1842238980096 bytes</span><br><span class="line">255 heads, 63 sectors/track, 223972 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1               1      223973  1799061503+  ee  GPT</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/vg_h95-lv_root: 53.7 GB, 53687091200 bytes</span><br><span class="line">255 heads, 63 sectors/track, 6527 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/vg_h95-lv_swap: 16.9 GB, 16903045120 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2055 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/vg_h95-lv_home: 2320.9 GB, 2320871981056 bytes</span><br><span class="line">255 heads, 63 sectors/track, 282163 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>cpuinfo</tag>
        <tag>fdisk</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2017/10/22/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素均排序完毕。</p>
<h1 id="排序效果"><a href="#排序效果" class="headerlink" title="排序效果"></a>排序效果</h1><p><img src="/img/选择排序.gif" alt></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SelectSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[ARR_SIZE];</span><br><span class="line"></span><br><span class="line">	RandInitArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	SelectSortAsc(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	PrintArray(arr, ARR_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RandInitArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		arr[i] = <span class="built_in">random</span>()%<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SelectSortAsc</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">min</span>, tmp;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;num<span class="number">-1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">min</span> = i;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (j=i+<span class="number">1</span>; j&lt;num; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[<span class="built_in">min</span>] &gt; arr[j])</span><br><span class="line">				<span class="built_in">min</span> = j;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">min</span> != i)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp = arr[<span class="built_in">min</span>];</span><br><span class="line">			arr[<span class="built_in">min</span>] = arr[i];</span><br><span class="line">			arr[i] = tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
</search>
